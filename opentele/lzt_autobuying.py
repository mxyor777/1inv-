from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from ..keyboards import lzt_menu_keyboard, back_button, accounts_origin_keyboard, autobuy_finally_step_keyboard, countries_keyboard
from autobuyer import process_buying, LolzApi, validate_account
from database import db
from config import API_ID, API_HASH
import asyncio
import time

router = Router()

class StartLztAutobuyingStates(StatesGroup):
    lzt_token = State()
    price_limits = State()
    expectation_days = State()
    count = State()
    origin = State()
    country = State()


@router.callback_query(F.data == 'lzt_market')
async def open_lzt_market_menu(call: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    filters = db.get_lzt_filters() or {
        'price_min': 0,
        'price_max': 30,
        'origin': ['fishing'],
        'country': ['ru'],
        'expectation_days': 30,
        'spam_block': 'no'
    }
    
    text = '<b>üõí LZT MARKET</b>\n\n'
    text += '<b>–¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã:</b>\n'
    text += f'- –¶–µ–Ω–∞: <b>{filters["price_min"]}-{filters["price_max"]}</b> —Ä—É–±.\n'
    text += f'- –ü—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: <b>{", ".join(filters["origin"])}</b>\n'
    text += f'- –°—Ç—Ä–∞–Ω–∞: <b>{", ".join(filters["country"])}</b>\n'
    text += f'- –û—Ç–ª—ë–∂–∫–∞: <b>{filters["expectation_days"]}</b> –¥–Ω–µ–π\n'
    text += f'- –°–ø–∞–º-–±–ª–æ–∫: <b>{"–î–∞" if filters["spam_block"] == "yes" else "–ù–µ—Ç"}</b>\n'
    
    await call.message.edit_text(
        text=text,
        reply_markup=lzt_menu_keyboard()
    )
    await state.clear()

@router.callback_query(F.data == 'change_lzt_filters')
async def change_lzt_filters(call: CallbackQuery, state: FSMContext):
    kb = InlineKeyboardBuilder()
    kb.button(text="üí≤ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω", callback_data="change_lzt_price")
    kb.button(text="üîç –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ", callback_data="change_lzt_origin")
    kb.button(text="üåç –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–∞–Ω—É", callback_data="change_lzt_country")
    kb.button(text="‚è≥ –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–ª—ë–∂–∫—É", callback_data="change_lzt_expectation")
    kb.button(text="üö´ –ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–∞–º-–±–ª–æ–∫", callback_data="change_lzt_spam")
    kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data="lzt_market")
    kb.adjust(1)
    
    await call.message.edit_text(
        '<b>üõ†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:</b>',
        reply_markup=kb.as_markup()
    )

@router.callback_query(F.data == 'change_lzt_price')
async def change_lzt_price(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text(
        '<b>üí≤ –í–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É (—Ä—É–±.):</b>',
        reply_markup=back_button('change_lzt_filters')
    )
    await state.set_state(StartLztAutobuyingStates.price_limits)

@router.callback_query(F.data == 'change_lzt_origin')
async def change_lzt_origin(call: CallbackQuery, state: FSMContext):
    kb = InlineKeyboardBuilder()
    kb.button(text="–§–∏—à–∏–Ω–≥", callback_data="set_lzt_origin:fishing")
    kb.button(text="–ë—Ä—É—Ç", callback_data="set_lzt_origin:brute")
    kb.button(text="–°—Ç–∏–ª–µ—Ä", callback_data="set_lzt_origin:stealer")
    kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data="change_lzt_filters")
    kb.adjust(1)
    
    await call.message.edit_text(
        '<b>üîç –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:</b>',
        reply_markup=kb.as_markup()
    )

@router.callback_query(F.data.startswith('set_lzt_origin:'))
async def set_lzt_origin(call: CallbackQuery, state: FSMContext):
    origin = call.data.split(':')[1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    filters = db.get_lzt_filters() or {}
    filters['origin'] = [origin]
    db.save_lzt_filters(filters)
    
    await call.answer(f"–ü—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {origin}")
    await change_lzt_filters(call, state)

@router.callback_query(F.data == 'change_lzt_country')
async def change_lzt_country(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text(
        '<b>üåç –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤:</b>',
        reply_markup=countries_keyboard()
    )
    await state.set_state(StartLztAutobuyingStates.country)

@router.callback_query(F.data.startswith('country_page:'))
async def handle_country_pagination(call: CallbackQuery, state: FSMContext):
    page = int(call.data.split(':')[1])
    current_state = await state.get_state()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é
    if current_state == StartLztAutobuyingStates.country.state:
        await call.message.edit_text(
            '<b>üåç –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –∞–∫–∫–∞—É–Ω—Ç–∞:</b>', 
            reply_markup=countries_keyboard(page)
        )
    else:
        # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (–ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤)
        await call.message.edit_text(
            '<b>üåç –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤:</b>',
            reply_markup=countries_keyboard(page)
        )
        
@router.callback_query(F.data.startswith('select_country:'))
async def select_country(call: CallbackQuery, state: FSMContext):
    country_code = call.data.split(':')[1]
    current_state = await state.get_state()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω—É
    await state.update_data(country=country_code.lower())
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    if current_state == StartLztAutobuyingStates.country.state:
        # –ü—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏
        state_data = await state.get_data()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        price_min = state_data.get('price_limits', [0, 30])[0] if 'price_limits' in state_data else 0
        price_max = state_data.get('price_limits', [0, 30])[1] if 'price_limits' in state_data else 30
        count = state_data.get('count', '0')
        expectation_days = state_data.get('expectation_days', 30)
        origin = state_data.get('origin', ['fishing'])
        
        finally_text = f"""<b>
–í–æ—Ç –≤—Å—è –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:

TOKEN: —Å–∫—Ä—ã—Ç–æ
–õ–∏–º–∏—Ç—ã –ø—Ä–∞–π—Å–∞: {price_min}‚ÇΩ - {price_max}‚ÇΩ
–ö–æ–ª-–≤–æ: {count}
–û—Ç–ª–µ–≥–∞: {expectation_days} –¥–Ω—è(–¥–Ω–µ–π)
–ü—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {origin}
–°—Ç—Ä–∞–Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {country_code.upper()}
</b>"""

        await call.message.edit_text(
            text=finally_text,
            reply_markup=autobuy_finally_step_keyboard()
        )
    else:
        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        filters = db.get_lzt_filters() or {}
        filters['country'] = [country_code.lower()]
        db.save_lzt_filters(filters)
        
        await call.answer(f"–°—Ç—Ä–∞–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {country_code.upper()}")
        await change_lzt_filters(call, state)

@router.callback_query(F.data == 'change_lzt_expectation')
async def change_lzt_expectation(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text(
        '<b>‚è≥ –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –æ—Ç–ª—ë–∂–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞:</b>',
        reply_markup=back_button('change_lzt_filters')
    )
    await state.set_state(StartLztAutobuyingStates.expectation_days)

@router.callback_query(F.data == 'change_lzt_spam')
async def change_lzt_spam(call: CallbackQuery, state: FSMContext):
    kb = InlineKeyboardBuilder()
    kb.button(text="–° —Å–ø–∞–º-–±–ª–æ–∫–æ–º", callback_data="set_lzt_spam:yes")
    kb.button(text="–ë–µ–∑ —Å–ø–∞–º-–±–ª–æ–∫–∞", callback_data="set_lzt_spam:no")
    kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data="change_lzt_filters")
    kb.adjust(1)
    
    await call.message.edit_text(
        '<b>üö´ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä —Å–ø–∞–º-–±–ª–æ–∫–∞:</b>',
        reply_markup=kb.as_markup()
    )

@router.callback_query(F.data.startswith('set_lzt_spam:'))
async def set_lzt_spam(call: CallbackQuery, state: FSMContext):
    spam = call.data.split(':')[1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    filters = db.get_lzt_filters() or {}
    filters['spam_block'] = spam
    db.save_lzt_filters(filters)
    
    await call.answer(f"–ü–∞—Ä–∞–º–µ—Ç—Ä —Å–ø–∞–º-–±–ª–æ–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {'–î–∞' if spam == 'yes' else '–ù–µ—Ç'}")
    await change_lzt_filters(call, state)

@router.callback_query(F.data == 'show_last_bought_accounts')
async def show_last_bought_accounts(call: CallbackQuery, state: FSMContext):
    all_bought = db.get_bought_accounts()
    last_mounth_accounts = [account for account in all_bought if int(time.time() - account['added_time']) <= 2629746]

    if not last_mounth_accounts:
        return await call.message.edit_text('<b>–£ –≤–∞—Å –Ω–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞ –º–µ—Å—è—Ü!</b>')

    date_text = '<b>' + '\n'.join([f'{account["phone"]}(https://lzt.market/{account["item_id"]}/) - {"‚úÖ" if (await validate_account(account["phone"])) else "‚ùå"}' for account in last_mounth_accounts]) + '</b>'
    await call.message.edit_text(date_text, reply_markup=back_button('lzt_market'))

@router.callback_query(F.data == 'lzt_autobuying')
async def lzt_autobuying(call: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    filters = db.get_lzt_filters() or {
        'price_min': 0,
        'price_max': 30,
        'origin': ['fishing'],
        'country': ['ru'],
        'expectation_days': 30,
        'spam_block': 'no'
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    filters_dict = dict(filters) if filters else {}
    await state.update_data({
        'price_limits': [filters_dict.get('price_min', 0), filters_dict.get('price_max', 30)],
        'origin': filters_dict.get('origin', ['fishing']),
        'country': filters_dict.get('country', ['ru']),
        'expectation_days': filters_dict.get('expectation_days', 30),
    })
    
    # –°—Ç—Ä–æ–∏–º —Ç–µ–∫—Å—Ç —Å —Ç–µ–∫—É—â–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    text = "<b>üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏</b>\n\n"
    text += "<b>–¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã:</b>\n"
    text += f"- –¶–µ–Ω–∞: <b>{filters_dict.get('price_min', 0)}-{filters_dict.get('price_max', 30)}</b> —Ä—É–±.\n"
    text += f"- –ü—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: <b>{', '.join(filters_dict.get('origin', ['fishing']))}</b>\n"
    text += f"- –°—Ç—Ä–∞–Ω–∞: <b>{', '.join(filters_dict.get('country', ['ru']))}</b>\n"
    text += f"- –û—Ç–ª—ë–∂–∫–∞: <b>{filters_dict.get('expectation_days', 30)}</b> –¥–Ω–µ–π\n"
    text += f"- –°–ø–∞–º-–±–ª–æ–∫: <b>{'–î–∞' if filters_dict.get('spam_block') == 'yes' else '–ù–µ—Ç'}</b>\n\n"
    
    text += "<b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:</b>"
    
    await call.message.edit_text(
        text,
        reply_markup=back_button('lzt_market')
    )
    await state.set_state(StartLztAutobuyingStates.count)

@router.message(StartLztAutobuyingStates.count)
async def get_count(message: Message, state: FSMContext):
    try:
        accs_count = int(message.text.strip())
        
        if accs_count <= 0:
            return await message.answer(
                '<b>‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!</b>',
                reply_markup=back_button('lzt_market')
            )
        
        await state.update_data(count=accs_count)
        state_data = await state.get_data()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        finally_text = f"""<b>
–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏:

TOKEN: —Å–∫—Ä—ã—Ç–æ
–õ–∏–º–∏—Ç—ã —Ü–µ–Ω—ã: {state_data['price_limits'][0]}‚ÇΩ - {state_data['price_limits'][1]}‚ÇΩ
–ö–æ–ª-–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {accs_count}
–û—Ç–ª—ë–∂–∫–∞: {state_data['expectation_days']} –¥–Ω—è(–¥–Ω–µ–π)
–ü—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: {', '.join(state_data['origin'])}
–°—Ç—Ä–∞–Ω–∞: {', '.join([country.upper() for country in state_data['country']])}
</b>"""

        await message.answer(
            finally_text,
            reply_markup=autobuy_finally_step_keyboard()
        )
    
    except ValueError:
        await message.answer(
            '<b>‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!</b>',
            reply_markup=back_button('lzt_market')
        )

@router.callback_query(F.data.startswith('pick_acc_origin:'), StartLztAutobuyingStates.origin)
async def get_origin(call: CallbackQuery, state: FSMContext):
    origin = call.data.split(':')[1]
    await state.update_data(origin=origin)

    await call.message.edit_text('<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –∞–∫–∫–∞—É–Ω—Ç–∞:</b>', reply_markup=countries_keyboard())
    await state.set_state(StartLztAutobuyingStates.country)

@router.message(StartLztAutobuyingStates.country)
async def get_country_fallback(message: Message, state: FSMContext):
    """Legacy handler for text input of country, redirects to keyboard selection"""
    await message.answer('<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –∏–∑ —Å–ø–∏—Å–∫–∞:</b>', reply_markup=countries_keyboard())

@router.callback_query(F.data == 'start_lzt_autobuying')
async def start_lzt_autobuying(call: CallbackQuery, state: FSMContext):
    state_data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
    filters = db.get_lzt_filters() or {}
    
    with open('data/lzt_token.txt', 'r', encoding='utf-8') as f:
        token = f.read()
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏
    price_min = state_data.get('price_limits', [0, 30])[0]
    price_max = state_data.get('price_limits', [0, 30])[1]
    origin = state_data.get('origin', ['fishing'])
    country = state_data.get('country', ['ru'])
    expectation_days = state_data.get('expectation_days', 30)
    count = state_data.get('count')
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if count is None:
        count = 1
        await call.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –±—É–¥–µ—Ç –∫—É–ø–ª–µ–Ω 1 –∞–∫–∫–∞—É–Ω—Ç")
    
    asyncio.create_task(
        process_buying(
            call.message, token, price_min, price_max,
            int(count), origin, country, expectation_days
        )
    )
    
    await call.message.edit_text('<b>‚úÖ –ê–≤—Ç–æ–±–∞–π –∑–∞–ø—É—â–µ–Ω!</b>')
    await state.clear()