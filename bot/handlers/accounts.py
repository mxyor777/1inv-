import os
import re
import asyncio
import logging
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database import db
from telegram_client import client_manager
from config import SESSIONS_DIR
from bot.keyboards import (
    accounts_menu_keyboard, 
    account_settings_keyboard, 
    back_button,
    back_to_menu_button,
    main_menu_keyboard,
    skip_button,
    proxy_settings_keyboard
)

logger = logging.getLogger(__name__)

router = Router()

os.makedirs(SESSIONS_DIR, exist_ok=True)

class AccountStates(StatesGroup):
    waiting_for_session = State()
    waiting_for_first_name = State()
    waiting_for_last_name = State()
    waiting_for_status = State()
    waiting_for_username = State()
    waiting_for_proxy = State()


@router.callback_query(F.data == "accounts")
async def callback_accounts(callback: CallbackQuery, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(previous_menu='accounts')
    await state.clear()
    
    accounts = db.get_accounts()
    
    if not accounts:
        try:
            await callback.message.edit_text(
                "<b>üë§ –ê–ö–ö–ê–£–ù–¢–´</b>\n\n"
                "<b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.</b>\n"
                "<b>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç.</b>",
                reply_markup=accounts_menu_keyboard(),
                parse_mode="HTML"
            )
        except Exception as e:
            if "message is not modified" not in str(e):
                raise
    else:
        text = "<b>üë§ –ê–ö–ö–ê–£–ù–¢–´</b>\n\n"
        text += "<b>–í–∞—à–∏ –∞–∫–∫–∞—É–Ω—Ç—ã:</b>\n\n"
        
        for acc in accounts:
            status_emoji = "‚úÖ" if acc['status'] == 'active' else "‚ùå"
            added_date = datetime.fromtimestamp(acc['added_date']).strftime('%d.%m.%y')
            last_used = datetime.fromtimestamp(acc['last_used']).strftime('%d.%m.%y')
            
            name = f"{acc['first_name']} {acc['last_name']}".strip()
            if not name:
                name = f"–ê–∫–∫–∞—É–Ω—Ç {acc['phone']}"
            
            text += f"<b>{name} | —Ä–µ–≥ {added_date}</b>\n"
            text += f"<b>{last_used} (–≤ —Ä–∞–±–æ—Ç–µ \"–æ—Ç\")</b>\n"
            text += f"<b>{acc['invites_sent']} ‚úÖ | {acc['invites_failed']} ‚ùå</b>\n"
            text += f"<b>–°—Ç–∞—Ç—É—Å: {acc['status']}</b>\n\n"
        
        try:
            await callback.message.edit_text(
                text,
                reply_markup=accounts_menu_keyboard(accounts),
                parse_mode="HTML"
            )
        except Exception as e:
            if "message is not modified" not in str(e):
                raise
    
    await callback.answer()


@router.callback_query(F.data == "add_accounts")
async def callback_add_accounts(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AccountStates.waiting_for_session)
    await callback.message.edit_text(
        "<b>üì§ –ü—Ä–∏—à–ª–∏—Ç–µ .session —Ñ–∞–π–ª –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ —Å—Ä–∞–∑—É.</b>",
        reply_markup=back_button()
    )
    await callback.answer()


@router.message(AccountStates.waiting_for_session, F.document)
async def handle_session_file(message: Message, state: FSMContext):
    document = message.document
    if not document.file_name.endswith('.session'):
        await message.answer(
            "<b>‚ùå –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .session\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–∞–π–ª.</b>",
            reply_markup=back_button()
        )
        return
    
    os.makedirs(SESSIONS_DIR, exist_ok=True)
    
    file = await message.bot.get_file(document.file_id)
    file_name = document.file_name
    file_path = os.path.join(SESSIONS_DIR, file_name)
    
    await message.bot.download_file(file.file_path, file_path)
    
    status_msg = await message.answer(f"<b>‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –∞–∫–∫–∞—É–Ω—Ç {file_name}...</b>")
    
    success = await client_manager.add_client(file_name)
    
    if success:
        kb = InlineKeyboardBuilder()
        kb.button(text="‚úÖ –î–∞", callback_data=f"use_proxy:{file_name}")
        kb.button(text="‚ùå –ù–µ—Ç", callback_data=f"no_proxy:{file_name}")
        kb.adjust(2)
        kb.row()
        kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data="add_accounts")
        
        await status_msg.edit_text(
            f"<b>‚úÖ –ê–∫–∫–∞—É–Ω—Ç {file_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º?</b>",
            reply_markup=kb.as_markup()
        )
    else:
        await status_msg.edit_text(f"<b>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç {file_name}.</b>")
        try:
            os.remove(file_path)
        except:
            pass
        
        await message.answer(
            "<b>–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é.</b>",
            reply_markup=back_to_menu_button()
        )


@router.callback_query(F.data.startswith("use_proxy:"))
async def callback_use_proxy(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–î–∞' –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏"""
    file_name = callback.data.split(':')[1]
    
    account = None
    for acc in db.get_accounts():
        if acc['session_file'] == os.path.splitext(file_name)[0]:
            account = acc
            break
    
    if not account:
        await callback.message.edit_text(
            "<b>‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>",
            reply_markup=back_button()
        )
        await callback.answer()
        return
    
    await state.update_data(account_id=account['id'])
    await state.set_state(AccountStates.waiting_for_proxy)
    
    await callback.message.edit_text(
        "<b>üîí –í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –ø—Ä–æ–∫—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "login:password:ip:port\n"
        "–∏–ª–∏\n"
        "login:password@ip:port</b>",
        reply_markup=back_button()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("no_proxy:"))
async def callback_no_proxy(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ù–µ—Ç' –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏"""
    await callback.message.edit_text(
        "<b>‚úÖ –ê–∫–∫–∞—É–Ω—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–µ–∑ –ø—Ä–æ–∫—Å–∏.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é.</b>",
        reply_markup=back_to_menu_button()
    )
    await callback.answer()


@router.message(AccountStates.waiting_for_proxy)
async def handle_proxy(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–æ–∫—Å–∏"""
    data = await state.get_data()
    account_id = data.get('account_id')
    
    if not account_id:
        await message.answer(
            "<b>‚ùå –û—à–∏–±–∫–∞: ID –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>",
            reply_markup=main_menu_keyboard()
        )
        await state.clear()
        return
    
    proxy_str = message.text.strip()
    
    valid_format = False
    if '@' in proxy_str:
        pattern = r'^[^:]+:[^@]+@[^:]+:\d+$'
        valid_format = bool(re.match(pattern, proxy_str))
    else:
        pattern = r'^[^:]+:[^:]+:[^:]+:\d+$'
        valid_format = bool(re.match(pattern, proxy_str))
    
    if not valid_format:
        await message.answer(
            "<b>‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ login:password:ip:port –∏–ª–∏ login:password@ip:port</b>",
            reply_markup=back_button()
        )
        return
    
    account = db.get_account(account_id)
    phone = account['phone']
    
    success, msg = await client_manager.update_client_proxy(phone, proxy_str)
    
    if success:
        await message.answer(
            f"<b>‚úÖ –ü—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {phone}.\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é.</b>",
            reply_markup=back_to_menu_button()
        )
    else:
        await message.answer(
            f"<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ–∫—Å–∏: {msg}\n"
            "–í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–∫—Å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.</b>",
            reply_markup=back_to_menu_button()
        )
    
    await state.clear()


@router.callback_query(F.data.startswith("account:"))
async def callback_account_details(callback: CallbackQuery, state: FSMContext):
    account_id = int(callback.data.split(':')[1])
    account = db.get_account(account_id)
    
    db._check_and_update_schema()
    
    if not account:
        await callback.message.edit_text(
            "<b>‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>",
            reply_markup=accounts_menu_keyboard()
        )
        await callback.answer()
        return
    
    status_emoji = "‚úÖ" if account['status'] == 'active' else "‚ùå"
    name = f"{account['first_name']} {account['last_name']}".strip()
    if not name:
        name = f"–ê–∫–∫–∞—É–Ω—Ç {account['phone']}"
    
    added_date = datetime.fromtimestamp(account['added_date']).strftime('%d.%m.%y')
    last_used = datetime.fromtimestamp(account['last_used']).strftime('%d.%m.%y')
    
    text = f"<b>üì± –ê–∫–∫–∞—É–Ω—Ç: {name}\n\n"
    text += f"–¢–µ–ª–µ—Ñ–æ–Ω: {account['phone']}\n"
    text += f"–ò–º—è: {account['first_name'] or '–ù–µ –∑–∞–¥–∞–Ω–æ'}\n"
    text += f"–§–∞–º–∏–ª–∏—è: {account['last_name'] or '–ù–µ –∑–∞–¥–∞–Ω–æ'}\n"
    text += f"–Æ–∑–µ—Ä–Ω–µ–π–º: @{account['username'] or '–ù–µ –∑–∞–¥–∞–Ω–æ'}\n"
    text += f"–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {added_date}\n"
    text += f"–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_used}\n"
    text += f"–°—Ç–∞—Ç—É—Å: {status_emoji} {account['status']}\n"
    text += f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: {account['invites_sent']}\n"
    text += f"–ù–µ—É–¥–∞—á–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: {account['invites_failed']}\n"
    
    if account.get('about'):
        text += f"\n–û–ø–∏—Å–∞–Ω–∏–µ (–±–∏–æ): {account['about']}\n"
    
    if account.get('proxy'):
        text += f"\n–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–∫—Å–∏: ‚úÖ\n"
    else:
        text += f"\n–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–∫—Å–∏: ‚ùå\n"
    text += "</b>"
    
    await callback.message.edit_text(
        text,
        reply_markup=account_settings_keyboard(account_id)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("edit_name:"))
async def callback_edit_name(callback: CallbackQuery, state: FSMContext):
    account_id = int(callback.data.split(':')[1])
    await state.update_data(account_id=account_id)
    await state.set_state(AccountStates.waiting_for_first_name)
    
    kb = InlineKeyboardBuilder()
    kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_account:{account_id}")
    
    await callback.message.edit_text(
        "<b>‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞:</b>",
        reply_markup=kb.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("back_to_account:"))
async def callback_back_to_account(callback: CallbackQuery, state: FSMContext):
    """Handler for back button that returns to account details"""
    account_id = int(callback.data.split(':')[1])
    account = db.get_account(account_id)
    
    if not account:
        await callback.message.edit_text(
            "<b>‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>",
            reply_markup=accounts_menu_keyboard()
        )
    else:
        await show_account_details(callback.message, account)
    
    await state.clear()
    await callback.answer()


@router.message(AccountStates.waiting_for_first_name)
async def handle_first_name(message: Message, state: FSMContext):
    data = await state.get_data()
    account_id = data.get('account_id')
    
    if not account_id:
        await message.answer(
            "<b>‚ùå –û—à–∏–±–∫–∞: ID –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>",
            reply_markup=main_menu_keyboard()
        )
        await state.clear()
        return
    
    first_name = message.text.strip()
    await state.update_data(first_name=first_name)
    await state.set_state(AccountStates.waiting_for_last_name)
    
    await message.answer(
        "<b>‚úèÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–∞ —Ñ–∞–º–∏–ª–∏—è):</b>",
        reply_markup=skip_button()
    )


@router.callback_query(F.data == "skip", AccountStates.waiting_for_last_name)
async def skip_last_name(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    account_id = data.get('account_id')
    first_name = data.get('first_name')
    
    if not account_id:
        await callback.message.edit_text(
            "<b>‚ùå –û—à–∏–±–∫–∞: ID –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>",
            reply_markup=main_menu_keyboard()
        )
        await state.clear()
        await callback.answer()
        return
    
    account = db.get_account(account_id)
    if not account:
        await callback.message.edit_text(
            "<b>‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>",
            reply_markup=main_menu_keyboard()
        )
        await state.clear()
        await callback.answer()
        return
    
    status_msg = await callback.message.edit_text("<b>‚è≥ –û–±–Ω–æ–≤–ª—è—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∞–∫–∫–∞—É–Ω—Ç–∞...</b>")
    
    phone = account['phone']
    
    try:
        if phone not in client_manager.clients:
            client_loaded = await client_manager.add_client(account['session_file'])
            if not client_loaded:
                await status_msg.edit_text("<b>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞.</b>")
                await callback.answer("–û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
                return
        
        success = await client_manager.update_profile(phone, first_name=first_name, last_name="")
        
        if success:
            db.update_account_info(account_id, first_name=first_name, last_name="")
            await status_msg.edit_text("<b>‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>")
        else:
            await status_msg.edit_text("<b>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∞–∫–∫–∞—É–Ω—Ç–∞.</b>")
        
        updated_account = db.get_account(account_id)
        name = f"{updated_account['first_name']} {updated_account['last_name']}".strip()
        if not name:
            name = f"–ê–∫–∫–∞—É–Ω—Ç {updated_account['phone']}"
        
        added_date = datetime.fromtimestamp(updated_account['added_date']).strftime('%d.%m.%y')
        last_used = datetime.fromtimestamp(updated_account['last_used']).strftime('%d.%m.%y')
        
        text = f"<b>üì± –ê–∫–∫–∞—É–Ω—Ç: {name}\n\n"
        text += f"–¢–µ–ª–µ—Ñ–æ–Ω: {updated_account['phone']}\n"
        text += f"–ò–º—è: {updated_account['first_name'] or '–ù–µ –∑–∞–¥–∞–Ω–æ'}\n"
        text += f"–§–∞–º–∏–ª–∏—è: {updated_account['last_name'] or '–ù–µ –∑–∞–¥–∞–Ω–æ'}\n"
        text += f"–Æ–∑–µ—Ä–Ω–µ–π–º: {updated_account['username'] or '–ù–µ –∑–∞–¥–∞–Ω–æ'}\n"
        text += f"–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {added_date}\n"
        text += f"–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_used}\n"
        text += f"–°—Ç–∞—Ç—É—Å: {updated_account['status']}\n"
        about_text = updated_account.get('about') or '–ù–µ –∑–∞–¥–∞–Ω–æ'
        text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {about_text}\n"
        text += f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: {updated_account['invites_sent']}\n"
        text += f"–ù–µ—É–¥–∞—á–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: {updated_account['invites_failed']}\n"
        text += "</b>"
        
        await callback.message.edit_text(
            text,
            reply_markup=account_settings_keyboard(account_id)
        )
        await state.clear()
        await callback.answer()
    except Exception as e:
        print(f"Error in skip_last_name: {e}")
        await status_msg.edit_text(f"<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}</b>")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
        await state.clear()


@router.message(AccountStates.waiting_for_last_name)
async def handle_last_name(message: Message, state: FSMContext):
    data = await state.get_data()
    account_id = data.get('account_id')
    first_name = data.get('first_name')
    
    if not account_id:
        await message.answer(
            "<b>‚ùå –û—à–∏–±–∫–∞: ID –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>",
            reply_markup=main_menu_keyboard()
        )
        await state.clear()
        return
    
    last_name = message.text.strip()
    
    account = db.get_account(account_id)
    if not account:
        await message.answer(
            "<b>‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>",
            reply_markup=main_menu_keyboard()
        )
        await state.clear()
        return
    
    status_msg = await message.answer("<b>‚è≥ –û–±–Ω–æ–≤–ª—è—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∞–∫–∫–∞—É–Ω—Ç–∞...</b>")
    
    phone = account['phone']
    success = await client_manager.update_profile(phone, first_name=first_name, last_name=last_name)
    
    if success:
        db.update_account_info(account_id, first_name=first_name, last_name=last_name)
        
        await status_msg.edit_text("<b>‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>")
    else:
        await status_msg.edit_text("<b>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∞–∫–∫–∞—É–Ω—Ç–∞.</b>")
    
    updated_account = db.get_account(account_id)
    name = f"{updated_account['first_name']} {updated_account['last_name']}".strip()
    if not name:
        name = f"–ê–∫–∫–∞—É–Ω—Ç {updated_account['phone']}"
    
    added_date = datetime.fromtimestamp(updated_account['added_date']).strftime('%d.%m.%y')
    last_used = datetime.fromtimestamp(updated_account['last_used']).strftime('%d.%m.%y')
    
    text = f"<b>üì± –ê–∫–∫–∞—É–Ω—Ç: {name}\n\n"
    text += f"–¢–µ–ª–µ—Ñ–æ–Ω: {updated_account['phone']}\n"
    text += f"–ò–º—è: {updated_account['first_name'] or '–ù–µ –∑–∞–¥–∞–Ω–æ'}\n"
    text += f"–§–∞–º–∏–ª–∏—è: {updated_account['last_name'] or '–ù–µ –∑–∞–¥–∞–Ω–æ'}\n"
    text += f"–Æ–∑–µ—Ä–Ω–µ–π–º: {updated_account['username'] or '–ù–µ –∑–∞–¥–∞–Ω–æ'}\n"
    text += f"–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {added_date}\n"
    text += f"–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_used}\n"
    text += f"–°—Ç–∞—Ç—É—Å: {updated_account['status']}\n"
    about_text = updated_account['about'] if 'about' in updated_account.keys() else '–ù–µ –∑–∞–¥–∞–Ω–æ'
    text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {about_text}\n"
    text += f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: {updated_account['invites_sent']}\n"
    text += f"–ù–µ—É–¥–∞—á–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: {updated_account['invites_failed']}\n"
    text += "</b>"
    
    await message.answer(
        text,
        reply_markup=account_settings_keyboard(account_id)
    )
    await state.clear()


@router.callback_query(F.data.startswith("set_status:"))
async def callback_set_status(callback: CallbackQuery, state: FSMContext):
    account_id = int(callback.data.split(':')[1])
    await state.update_data(account_id=account_id)
    await state.set_state(AccountStates.waiting_for_status)
    
    kb = InlineKeyboardBuilder()
    kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_account:{account_id}")
    
    await callback.message.edit_text(
        "<b>üí¨ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–±–∏–æ) –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞:</b>",
        reply_markup=kb.as_markup()
    )
    await callback.answer()


@router.message(AccountStates.waiting_for_status)
async def handle_status(message: Message, state: FSMContext):
    data = await state.get_data()
    account_id = data.get('account_id')
    
    if not account_id:
        await message.answer(
            "<b>‚ùå –û—à–∏–±–∫–∞: ID –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>",
            reply_markup=main_menu_keyboard()
        )
        await state.clear()
        return
    
    status_text = message.text.strip()
    
    account = db.get_account(account_id)
    if not account:
        await message.answer(
            "<b>‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>",
            reply_markup=main_menu_keyboard()
        )
        await state.clear()
        return
    
    phone = account['phone']
    success = await client_manager.update_profile(phone, about=status_text)
    
    if success:
        db.update_account_about(account_id, status_text)
        await message.answer("<b>‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!</b>")
    else:
        await message.answer("<b>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞.</b>")
    
    account_status = await client_manager.check_client_status(phone)
    if account_status['status'] != 'active':
        db.update_account_status(account_id, account_status['status'], account_status['details'])
    
    updated_account = db.get_account(account_id)
    name = f"{updated_account['first_name']} {updated_account['last_name']}".strip()
    if not name:
        name = f"–ê–∫–∫–∞—É–Ω—Ç {updated_account['phone']}"
    
    added_date = datetime.fromtimestamp(updated_account['added_date']).strftime('%d.%m.%y')
    last_used = datetime.fromtimestamp(updated_account['last_used']).strftime('%d.%m.%y')
    
    text = f"<b>üì± –ê–∫–∫–∞—É–Ω—Ç: {name}\n\n"
    text += f"–¢–µ–ª–µ—Ñ–æ–Ω: {updated_account['phone']}\n"
    text += f"–ò–º—è: {updated_account['first_name'] or '–ù–µ –∑–∞–¥–∞–Ω–æ'}\n"
    text += f"–§–∞–º–∏–ª–∏—è: {updated_account['last_name'] or '–ù–µ –∑–∞–¥–∞–Ω–æ'}\n"
    text += f"–Æ–∑–µ—Ä–Ω–µ–π–º: {updated_account['username'] or '–ù–µ –∑–∞–¥–∞–Ω–æ'}\n"
    text += f"–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {added_date}\n"
    text += f"–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_used}\n"
    text += f"–°—Ç–∞—Ç—É—Å: {updated_account['status']}\n"
    about_text = updated_account['about'] if 'about' in updated_account.keys() else '–ù–µ –∑–∞–¥–∞–Ω–æ'
    text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {about_text}\n"
    text += f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: {updated_account['invites_sent']}\n"
    text += f"–ù–µ—É–¥–∞—á–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: {updated_account['invites_failed']}\n"
    text += "</b>"
    
    await message.answer(
        text,
        reply_markup=account_settings_keyboard(account_id)
    )
    await state.clear()


@router.callback_query(F.data.startswith("delete_account:"))
async def callback_delete_account(callback: CallbackQuery, state: FSMContext):
    account_id = int(callback.data.split(':')[1])
    
    account = db.get_account(account_id)
    if not account:
        await callback.message.edit_text(
            "<b>‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>",
            reply_markup=accounts_menu_keyboard()
        )
        await callback.answer()
        return
    
    name = f"{account['first_name']} {account['last_name']}".strip()
    if not name:
        name = f"–ê–∫–∫–∞—É–Ω—Ç {account['phone']}"
    
    db.delete_account(account_id)
    
    session_file = account['session_file']
    session_path = os.path.join(SESSIONS_DIR, session_file)
    try:
        if os.path.exists(session_path):
            os.remove(session_path)
        if os.path.exists(f"{session_path}.session"):
            os.remove(f"{session_path}.session")
    except Exception as e:
        pass
    
    await callback.message.edit_text(
        f"<b>‚úÖ –ê–∫–∫–∞—É–Ω—Ç {name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.</b>",
        reply_markup=accounts_menu_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "main_menu")
async def callback_to_main_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    
    try:
        await callback.message.edit_text(
            "<b>üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>",
            reply_markup=main_menu_keyboard()
        )
    except Exception as e:
        if "message is not modified" not in str(e):
            raise
    
    await callback.answer()


@router.callback_query(F.data == "cancel")
async def callback_cancel_in_accounts(callback: CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    
    if current_state in [AccountStates.waiting_for_session.state]:
        await state.clear()
        accounts = db.get_accounts()
        await show_accounts_list(callback.message, accounts)
    elif current_state in [AccountStates.waiting_for_first_name.state, AccountStates.waiting_for_status.state, 
                          AccountStates.waiting_for_last_name.state]:
        data = await state.get_data()
        account_id = data.get('account_id')
        await state.clear()
        
        if account_id:
            account = db.get_account(account_id)
            if account:
                await show_account_details(callback.message, account)
            else:
                await callback.message.edit_text(
                    "<b>‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>",
                    reply_markup=accounts_menu_keyboard()
                )
        else:
            accounts = db.get_accounts()
            await show_accounts_list(callback.message, accounts)
    else:
        await state.clear()
        accounts = db.get_accounts()
        await show_accounts_list(callback.message, accounts)
    
    await callback.answer()


async def show_accounts_list(message, accounts):
    """Helper function to show accounts list"""
    if not accounts:
        try:
            await message.edit_text(
                "<b>üì± –ê–∫–∫–∞—É–Ω—Ç—ã\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã.</b>",
                reply_markup=accounts_menu_keyboard()
            )
        except Exception as e:
            if "message is not modified" not in str(e):
                raise
    else:
        text = "<b>üì± –ê–∫–∫–∞—É–Ω—Ç—ã\n\n"
        for acc in accounts:
            status_emoji = "‚úÖ" if acc['status'] == 'active' else "‚ùå"
            added_date = datetime.fromtimestamp(acc['added_date']).strftime('%d.%m.%y')
            last_used = datetime.fromtimestamp(acc['last_used']).strftime('%d.%m.%y')
            
            name = f"{acc['first_name']} {acc['last_name']}".strip()
            if not name:
                name = f"–ê–∫–∫–∞—É–Ω—Ç {acc['phone']}"
            
            text += f"{name} | —Ä–µ–≥ {added_date}\n"
            text += f"{last_used} (–≤ —Ä–∞–±–æ—Ç–µ \"–æ—Ç\")\n"
            text += f"{acc['invites_sent']} ‚úÖ | {acc['invites_failed']} ‚ùå\n"
            text += f"–°—Ç–∞—Ç—É—Å: {acc['status']}\n\n"
        text += "</b>"
        
        try:
            await message.edit_text(
                text,
                reply_markup=accounts_menu_keyboard(accounts)
            )
        except Exception as e:
            if "message is not modified" not in str(e):
                raise


async def show_account_details(message, account):
    """Helper function to display account details"""
    status_emoji = "‚úÖ" if account['status'] == 'active' else "‚ùå"
    name = f"{account['first_name']} {account['last_name']}".strip()
    if not name:
        name = f"–ê–∫–∫–∞—É–Ω—Ç {account['phone']}"
    
    added_date = datetime.fromtimestamp(account['added_date']).strftime('%d.%m.%y')
    last_used = datetime.fromtimestamp(account['last_used']).strftime('%d.%m.%y')
    
    text = f"<b>üì± –ê–∫–∫–∞—É–Ω—Ç: {name}\n\n"
    text += f"–¢–µ–ª–µ—Ñ–æ–Ω: {account['phone']}\n"
    text += f"–ò–º—è: {account['first_name'] or '–ù–µ –∑–∞–¥–∞–Ω–æ'}\n"
    text += f"–§–∞–º–∏–ª–∏—è: {account['last_name'] or '–ù–µ –∑–∞–¥–∞–Ω–æ'}\n"
    text += f"–Æ–∑–µ—Ä–Ω–µ–π–º: @{account['username'] or '–ù–µ –∑–∞–¥–∞–Ω–æ'}\n"
    text += f"–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {added_date}\n"
    text += f"–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_used}\n"
    text += f"–°—Ç–∞—Ç—É—Å: {status_emoji} {account['status']}\n"
    text += f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: {account['invites_sent']}\n"
    text += f"–ù–µ—É–¥–∞—á–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: {account['invites_failed']}\n"
    
    if account.get('about'):
        text += f"\n–û–ø–∏—Å–∞–Ω–∏–µ (–±–∏–æ): {account['about']}\n"
    
    if account.get('proxy'):
        text += f"\n–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–∫—Å–∏: ‚úÖ\n"
    else:
        text += f"\n–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–∫—Å–∏: ‚ùå\n"
    
    text += "</b>"
    
    await message.edit_text(
        text,
        reply_markup=account_settings_keyboard(account['id'])
    )


@router.callback_query(F.data.startswith("edit_username:"))
async def callback_edit_username(callback: CallbackQuery, state: FSMContext):
    account_id = int(callback.data.split(':')[1])
    await state.update_data(account_id=account_id)
    await state.set_state(AccountStates.waiting_for_username)
    
    kb = InlineKeyboardBuilder()
    kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_account:{account_id}")
    
    await callback.message.edit_text(
        "<b>üî§ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —é–∑–µ—Ä–Ω–µ–π–º –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ (–±–µ–∑ —Å–∏–º–≤–æ–ª–∞ @):\n\n"
        "‚ùóÔ∏è –Æ–∑–µ—Ä–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 5 –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –∑–Ω–∞–∫ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è.\n"
        "‚ùóÔ∏è –Æ–∑–µ—Ä–Ω–µ–π–º –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç.</b>",
        reply_markup=kb.as_markup()
    )
    await callback.answer()


@router.message(AccountStates.waiting_for_username)
async def handle_username(message: Message, state: FSMContext):
    data = await state.get_data()
    account_id = data.get('account_id')
    
    if not account_id:
        await message.answer(
            "<b>‚ùå –û—à–∏–±–∫–∞: ID –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>",
            reply_markup=main_menu_keyboard()
        )
        await state.clear()
        return
    
    username = message.text.strip()
    
    if not username:
        username = None
    elif not re.match(r'^[a-zA-Z0-9_]{5,32}$', username):
        await message.answer(
            "<b>‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞. –Æ–∑–µ—Ä–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 5 –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –∑–Ω–∞–∫ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è.</b>",
            reply_markup=InlineKeyboardBuilder().button(
                text="üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data=f"account:{account_id}"
            ).as_markup()
        )
        await state.clear()
        return
    
    account = db.get_account(account_id)
    if not account:
        await message.answer(
            "<b>‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>",
            reply_markup=main_menu_keyboard()
        )
        await state.clear()
        return
    
    status_msg = await message.answer("<b>‚è≥ –û–±–Ω–æ–≤–ª—è—é —é–∑–µ—Ä–Ω–µ–π–º –∞–∫–∫–∞—É–Ω—Ç–∞...</b>")
    
    phone = account['phone']
    try:
        success = await client_manager.update_profile(phone, username=username)
        
        if success:
            await asyncio.sleep(1)
            
            updated_account = db.get_account(account_id)
            
            me = await client_manager.clients[phone]['client'].get_me()
            actual_username = me.username
            
            if username == actual_username or (username is None and actual_username is None):
                await status_msg.edit_text("<b>‚úÖ –Æ–∑–µ—Ä–Ω–µ–π–º –∞–∫–∫–∞—É–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ @{actual_username or '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}!</b>")
            else:
                await status_msg.edit_text(
                    "<b>‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –Ω–æ —é–∑–µ—Ä–Ω–µ–π–º –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è: @{actual_username or '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}. "
                    "–í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ—Ç —é–∑–µ—Ä–Ω–µ–π–º —É–∂–µ –∑–∞–Ω—è—Ç –∏–ª–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º Telegram.</b>"
                )
        else:
            await status_msg.edit_text("<b>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —é–∑–µ—Ä–Ω–µ–π–º –∞–∫–∫–∞—É–Ω—Ç–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.</b>")
        
        await asyncio.sleep(1)
        updated_account = db.get_account(account_id)
        
        await message.answer(
            "<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ:</b>",
            reply_markup=account_settings_keyboard(account_id)
        )
        await show_account_details(message, updated_account)
        
    except Exception as e:
        await status_msg.edit_text("<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —é–∑–µ—Ä–Ω–µ–π–º–∞: {str(e)}</b>")
    
    await state.clear()


@router.callback_query(F.data.startswith("proxy_settings:"))
async def callback_proxy_settings(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏"""
    account_id = int(callback.data.split(':')[1])
    account = db.get_account(account_id)
    
    if not account:
        await callback.message.edit_text(
            "<b>‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>",
            reply_markup=accounts_menu_keyboard()
        )
        await callback.answer()
        return
    
    proxy_status = "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" if account.get('proxy') else "‚ùå –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è"
    proxy_value = account.get('proxy') or "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    
    await callback.message.edit_text(
        f"<b>üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞\n\n"
        f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {proxy_status}\n"
        f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {proxy_value}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>",
        reply_markup=proxy_settings_keyboard(account_id)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("add_proxy:"))
async def callback_add_proxy(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏"""
    account_id = int(callback.data.split(':')[1])
    account = db.get_account(account_id)
    
    if not account:
        await callback.message.edit_text(
            "<b>‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>",
            reply_markup=accounts_menu_keyboard()
        )
        await callback.answer()
        return
    
    await state.update_data(account_id=account_id)
    await state.set_state(AccountStates.waiting_for_proxy)
    
    await callback.message.edit_text(
        "<b>üîí –í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –ø—Ä–æ–∫—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "login:password:ip:port\n"
        "–∏–ª–∏\n"
        "login:password@ip:port</b>",
        reply_markup=back_button(f"proxy_settings:{account_id}")
    )
    await callback.answer()


@router.callback_query(F.data.startswith("remove_proxy:"))
async def callback_remove_proxy(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏"""
    account_id = int(callback.data.split(':')[1])
    account = db.get_account(account_id)
    
    if not account:
        await callback.message.edit_text(
            "<b>‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>",
            reply_markup=accounts_menu_keyboard()
        )
        await callback.answer()
        return
    
    if not account.get('proxy'):
        await callback.message.edit_text(
            "<b>‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ –∏ —Ç–∞–∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.</b>",
            reply_markup=proxy_settings_keyboard(account_id)
        )
        await callback.answer()
        return
    
    phone = account['phone']
    success, msg = await client_manager.remove_client_proxy(phone)
    
    if success:
        await callback.message.edit_text(
            "<b>‚úÖ –ü—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞.\n"
            "–¢–µ–ø–µ—Ä—å –∞–∫–∫–∞—É–Ω—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –ø—Ä–æ–∫—Å–∏.</b>",
            reply_markup=proxy_settings_keyboard(account_id)
        )
    else:
        await callback.message.edit_text(
            f"<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏: {msg}</b>",
            reply_markup=proxy_settings_keyboard(account_id)
        )
    
    await callback.answer() 