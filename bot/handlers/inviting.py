import asyncio
import random
import time
import logging
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from telethon.errors import UserPrivacyRestrictedError, FloodWaitError, ChatAdminRequiredError
from telethon.tl.functions.channels import InviteToChannelRequest
from telethon.tl.functions.messages import AddChatUserRequest
from telethon.tl.types import Channel, Chat

from database import db
from telegram_client import client_manager
from bot.keyboards import (
    inviting_keyboard,
    active_invites_keyboard,
    back_button,
    main_menu_keyboard,
    yes_no_keyboard,
    choose_account_keyboard,
    choose_target_chat_keyboard,
    create_chat_keyboard
)

router = Router()

ACTIVE_INVITES = {}

class InvitingStates(StatesGroup):
    waiting_for_target_chat = State()
    waiting_for_account = State()
    waiting_for_parsed_file = State()
    waiting_for_chat_title = State()
    waiting_for_chat_creation = State()


@router.callback_query(F.data == "inviting")
async def callback_inviting(callback: CallbackQuery, state: FSMContext):
    """Handle inviting menu callback"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(previous_menu='inviting')
    await state.clear()
    
    invites = db.get_active_invites()
    
    text = "üîÑ –ò–ù–í–ê–ô–¢–ò–ù–ì\n\n"
    
    if invites:
        for inv in invites:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å —É—á–µ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∫–ª—é—á–µ–π
            if 'account_name' in inv:
                account_name = inv['account_name']
            elif 'account_id' in inv:
                account = db.get_account(inv['account_id'])
                if account:
                    phone = account['phone'] if 'phone' in account else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'
                    account_name = f"–ê–∫–∫–∞—É–Ω—Ç {phone}"
                else:
                    account_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç"
            else:
                account_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç"
                
            target_chat = inv['target_chat_title'] if 'target_chat_title' in inv else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç'
            progress = f"{inv['current_invited']}/{inv['total_users']}"
            
            text += f"üë§ {account_name} ‚Üí üì£ {target_chat}\n"
            text += f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}\n\n"
        
        try:
            await callback.message.edit_text(
                text,
                reply_markup=inviting_menu_keyboard(invites),
                parse_mode="HTML"
            )
        except Exception as e:
            if "message is not modified" not in str(e):
                raise
    else:
        text += "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞.\n\n"
        text += "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞."
        
        try:
            await callback.message.edit_text(
                text,
                reply_markup=inviting_menu_keyboard(),
                parse_mode="HTML"
            )
        except Exception as e:
            if "message is not modified" not in str(e):
                raise
    
    await callback.answer()


def inviting_menu_keyboard(invites=None):
    """Create inviting menu keyboard"""
    kb = InlineKeyboardBuilder()
    
    if invites:
        for invite in invites:
            invite_id = invite['id']
            
            account = db.get_account(invite['account_id'])
            target_chat = db.get_target_chat(invite['target_chat_id'])
            
            account_phone = account['phone'] if account else "Unknown"
            target_chat_title = target_chat['title'] if target_chat else "Unknown"
            
            progress = f"{invite['current_invited']}/{invite['total_users']}"
            
            kb.button(
                text=f"{target_chat_title} | {account_phone} ({progress})", 
                callback_data=f"invite_details:{invite_id}"
            )
    
    kb.button(text="‚ûï –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∏–Ω–≤–∞–π—Ç–∏–Ω–≥", callback_data="start_new_inviting")
    kb.button(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    kb.adjust(1)
    return kb.as_markup()


@router.callback_query(F.data == "start_new_inviting")
async def callback_start_new_inviting(callback: CallbackQuery, state: FSMContext):
    """Handle start new inviting callback"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(previous_menu='inviting')
    await state.set_state(InvitingStates.waiting_for_target_chat)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–µ–≤—ã–µ —á–∞—Ç—ã
    target_chats = db.get_target_chats()
    
    if not target_chats:
        await callback.message.edit_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–≤—ã—Ö —á–∞—Ç–æ–≤.\n\n"
            "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —á–∞—Ç –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª \"–ß–∞—Ç—ã –¥–ª—è –∏–Ω–≤–∞–π—Ç–∞\".",
            reply_markup=back_button("inviting"),
            parse_mode="HTML"
        )
        await callback.answer()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    parsed_files = db.get_parsed_files()
    if not parsed_files:
        await callback.message.edit_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞.\n\n"
            "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª \"–ü–∞—Ä—Å–∏–Ω–≥\".",
            reply_markup=back_button("inviting"),
            parse_mode="HTML"
        )
        await callback.answer()
        return
    
    await callback.message.edit_text(
        "üì£ –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞:",
        reply_markup=choose_target_chat_keyboard(target_chats),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(InvitingStates.waiting_for_target_chat, F.data.startswith("select_target_chat:"))
async def callback_select_target_chat(callback: CallbackQuery, state: FSMContext):
    """Handle target chat selection for inviting"""
    target_chat_id = int(callback.data.split(':')[1])
    target_chat = db.get_target_chat(target_chat_id)
    
    if not target_chat:
        try:
            await callback.message.edit_text(
                "‚ùå –¶–µ–ª–µ–≤–æ–π —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=back_button("inviting")
            )
        except Exception as e:
            if "message is not modified" not in str(e):
                raise
        await callback.answer()
        return
    
    await state.update_data(target_chat_id=target_chat_id)
    
    accounts = db.get_accounts()
    await state.set_state(InvitingStates.waiting_for_account)
    
    try:
        await callback.message.edit_text(
            f"üë§ –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ –≤ —á–∞—Ç {target_chat['title']}:",
            reply_markup=choose_account_keyboard(accounts)
        )
    except Exception as e:
        if "message is not modified" not in str(e):
            raise
    await callback.answer()


@router.callback_query(InvitingStates.waiting_for_account, F.data.startswith("select_account:"))
async def callback_select_account(callback: CallbackQuery, state: FSMContext):
    """Handle account selection for inviting"""
    account_id = int(callback.data.split(':')[1])
    account = db.get_account(account_id)
    
    if not account:
        try:
            await callback.message.edit_text(
                "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=back_button("inviting")
            )
        except Exception as e:
            if "message is not modified" not in str(e):
                raise
        await callback.answer()
        return
    
    await state.update_data(account_id=account_id)
    
    state_data = await state.get_data()
    if state_data.get('creating_new_chat'):
        try:
            await callback.message.edit_text(
                "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞:",
                reply_markup=back_button("start_new_inviting")
            )
        except Exception as e:
            if "message is not modified" not in str(e):
                raise
        await state.set_state(InvitingStates.waiting_for_chat_title)
        await callback.answer()
        return
    
    parsed_files = db.get_parsed_files()
    await state.set_state(InvitingStates.waiting_for_parsed_file)
    
    kb = InlineKeyboardBuilder()
    
    for file in parsed_files:
        kb.button(
            text=f"{file['file_name']} ({file['total_users']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)", 
            callback_data=f"select_parsed_file:{file['id']}"
        )
    
    kb.button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    kb.adjust(1)
    
    try:
        await callback.message.edit_text(
            "üìÅ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞:",
            reply_markup=kb.as_markup()
        )
    except Exception as e:
        if "message is not modified" not in str(e):
            raise
    await callback.answer()


@router.callback_query(InvitingStates.waiting_for_parsed_file, F.data.startswith("select_parsed_file:"))
async def callback_select_parsed_file(callback: CallbackQuery, state: FSMContext):
    """Handle parsed file selection for inviting"""
    parsed_file_id = int(callback.data.split(':')[1])
    parsed_file = db.get_parsed_file(parsed_file_id)
    
    if not parsed_file:
        try:
            await callback.message.edit_text(
                "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=back_button("inviting")
            )
        except Exception as e:
            if "message is not modified" not in str(e):
                raise
        await callback.answer()
        return
    
    state_data = await state.get_data()
    
    target_chat_id = state_data.get('target_chat_id')
    account_id = state_data.get('account_id')
    
    target_chat = db.get_target_chat(target_chat_id)
    account = db.get_account(account_id)
    
    if not target_chat or not account:
        try:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω —á–∞—Ç –∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç.",
                reply_markup=back_button("inviting")
            )
        except Exception as e:
            if "message is not modified" not in str(e):
                raise
        await callback.answer()
        return
    
    users = db.get_parsed_users(parsed_file['id'])
    
    if not users:
        try:
            await callback.message.edit_text(
                "‚ùå –í —Ñ–∞–π–ª–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞.",
                reply_markup=back_button("inviting")
            )
        except Exception as e:
            if "message is not modified" not in str(e):
                raise
        await callback.answer()
        return
    
    invite_id = db.create_invite(
        account_id=account_id,
        target_chat_id=target_chat_id,
        parsed_file_id=parsed_file_id,
        total_users=len(users)
    )
    
    try:
        await callback.message.edit_text(
            "‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
            "üì± –ê–∫–∫–∞—É–Ω—Ç: {account['phone']}\n"
            "üí¨ –ß–∞—Ç: {target_chat['title']}\n"
            "üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n\n"
            "‚ñ∂Ô∏è –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å—Å –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞...",
            reply_markup=back_button("inviting")
        )
    except Exception as e:
        if "message is not modified" not in str(e):
            raise
    
    ACTIVE_INVITES[invite_id] = True
    asyncio.create_task(process_invite(invite_id))
    
    await callback.answer()


@router.callback_query(F.data == "create_new_chat")
async def callback_create_new_chat(callback: CallbackQuery, state: FSMContext):
    """Handle creating a new chat option"""
    accounts = db.get_accounts()
    
    if not accounts:
        try:
            await callback.message.edit_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ '–ê–∫–∫–∞—É–Ω—Ç—ã'.",
                reply_markup=back_button("inviting")
            )
        except Exception as e:
            if "message is not modified" not in str(e):
                raise
        await callback.answer()
        return
    
    try:
        await callback.message.edit_text(
            "üë§ –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —á–∞—Ç:",
            reply_markup=choose_account_keyboard(accounts)
        )
    except Exception as e:
        if "message is not modified" not in str(e):
            raise
            
    await state.set_state(InvitingStates.waiting_for_account)
    await state.update_data(creating_new_chat=True)
    await callback.answer()

@router.message(InvitingStates.waiting_for_chat_title)
async def handle_chat_title(message: Message, state: FSMContext):
    """Handle chat title input for creating a new chat"""
    chat_title = message.text.strip()
    
    if not chat_title:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
            reply_markup=back_button("start_new_inviting")
        )
        return
    
    await state.update_data(chat_title=chat_title)
    
    await message.answer(
        f"üìù –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —á–∞—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º: {chat_title}\n\n"
        "–°–æ–∑–¥–∞—Ç—å —á–∞—Ç?",
        reply_markup=create_chat_keyboard()
    )
    await state.set_state(InvitingStates.waiting_for_chat_creation)

@router.callback_query(F.data == "confirm_create_chat", InvitingStates.waiting_for_chat_creation)
async def callback_confirm_create_chat(callback: CallbackQuery, state: FSMContext):
    """Handle confirmation of chat creation"""
    state_data = await state.get_data()
    
    account_id = state_data.get('account_id')
    chat_title = state_data.get('chat_title')
    
    if not account_id or not chat_title:
        try:
            await callback.message.edit_text(
                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞.",
                reply_markup=back_button("inviting")
            )
        except Exception as e:
            if "message is not modified" not in str(e):
                raise
        await callback.answer()
        return
    
    account = db.get_account(account_id)
    if not account:
        try:
            await callback.message.edit_text(
                "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=back_button("inviting")
            )
        except Exception as e:
            if "message is not modified" not in str(e):
                raise
        await callback.answer()
        return
    
    try:
        await callback.message.edit_text(
            "‚è≥ –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π —á–∞—Ç '{chat_title}'..."
        )
    except Exception as e:
        if "message is not modified" not in str(e):
            raise
    
    chat_info, error = await client_manager.create_group_chat(account['phone'], chat_title)
    
    if not chat_info:
        try:
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞: {error}",
                reply_markup=back_button("inviting")
            )
        except Exception as e:
            if "message is not modified" not in str(e):
                raise
        await callback.answer()
        return
    
    target_chat_id = db.add_target_chat(
        chat_id=chat_info['id'],
        username=chat_info['username'],
        title=chat_info['title'],
        link=chat_info['link']
    )
    
    await state.update_data(target_chat_id=target_chat_id)
    
    parsed_files = db.get_parsed_files()
    await state.set_state(InvitingStates.waiting_for_parsed_file)
    
    kb = InlineKeyboardBuilder()
    
    for file in parsed_files:
        kb.button(
            text=f"{file['file_name']} ({file['total_users']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)", 
            callback_data=f"select_parsed_file:{file['id']}"
        )
    
    kb.button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    kb.adjust(1)
    
    try:
        await callback.message.edit_text(
            "‚úÖ –ß–∞—Ç '{chat_title}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
            "üìÅ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞:",
            reply_markup=kb.as_markup()
        )
    except Exception as e:
        if "message is not modified" not in str(e):
            raise
    await callback.answer()


@router.callback_query(F.data.startswith("invite_details:"))
async def callback_invite_details(callback: CallbackQuery, state: FSMContext):
    """Handle invite details callback"""
    invite_id = int(callback.data.split(':')[1])
    invite = db.get_invite(invite_id)
    
    if not invite:
        try:
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ—Ü–µ—Å—Å –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=back_button("inviting")
            )
        except Exception as e:
            if "message is not modified" not in str(e):
                raise
        await callback.answer()
        return
    
    account = db.get_account(invite['account_id'])
    target_chat = db.get_target_chat(invite['target_chat_id'])
    parsed_file = db.get_parsed_file(invite['parsed_file_id'])
    
    account_phone = account['phone'] if account else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç"
    target_chat_title = target_chat['title'] if target_chat else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç"
    file_name = parsed_file['file_name'] if parsed_file else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–π–ª"
    
    status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if invite['active'] else "‚è∏ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    progress = f"{invite['current_invited']}/{invite['total_users']}"
    created_time = datetime.fromtimestamp(invite['created_time']).strftime('%d.%m.%y %H:%M')
    
    text = "üîÑ –î–µ—Ç–∞–ª–∏ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞\n\n"
    text += f"üì± –ê–∫–∫–∞—É–Ω—Ç: {account_phone}\n"
    text += f"üí¨ –¶–µ–ª–µ–≤–æ–π —á–∞—Ç: {target_chat_title}\n"
    text += f"üìÇ –§–∞–π–ª: {file_name}\n"
    text += f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}\n"
    text += f"üì° –°—Ç–∞—Ç—É—Å: {status}\n"
    text += f"‚è±Ô∏è –ó–∞–ø—É—â–µ–Ω: {created_time}"
    
    kb = InlineKeyboardBuilder()
    
    if invite['active']:
        kb.button(text="‚è∏ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"pause_invite:{invite_id}")
    else:
        kb.button(text="‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å", callback_data=f"resume_invite:{invite_id}")
    
    kb.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_invite:{invite_id}")
    kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data="inviting")
    kb.button(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    kb.adjust(1)
    
    try:
        await callback.message.edit_text(
            text,
            reply_markup=kb.as_markup()
        )
    except Exception as e:
        if "message is not modified" not in str(e):
            raise
    await callback.answer()


@router.callback_query(F.data.startswith("pause_invite:"))
async def callback_pause_invite(callback: CallbackQuery, state: FSMContext):
    """Handle pause invite callback"""
    invite_id = int(callback.data.split(':')[1])
    invite = db.get_invite(invite_id)
    
    if not invite:
        try:
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ—Ü–µ—Å—Å –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=back_button("inviting")
            )
        except Exception as e:
            if "message is not modified" not in str(e):
                raise
        await callback.answer()
        return
    
    account = db.get_account(invite['account_id'])
    target_chat = db.get_target_chat(invite['target_chat_id'])
    
    account_phone = account['phone'] if account else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç"
    target_chat_title = target_chat['title'] if target_chat else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç"
    
    db.update_invite_status(invite_id, active=False)
    
    ACTIVE_INVITES[invite_id] = False
    logging.info(f"Marked invite {invite_id} for stopping in global registry")
    
    try:
        await callback.message.edit_text(
            "‚è∏ –ò–Ω–≤–∞–π—Ç–∏–Ω–≥ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n\n"
            f"üì± –ê–∫–∫–∞—É–Ω—Ç: {account_phone}\n"
            f"üí¨ –ß–∞—Ç: {target_chat_title}\n"
            f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {invite['current_invited']}/{invite['total_users']}",
            reply_markup=back_button("inviting")
        )
    except Exception as e:
        if "message is not modified" not in str(e):
            raise
    await callback.answer()


@router.callback_query(F.data.startswith("resume_invite:"))
async def callback_resume_invite(callback: CallbackQuery, state: FSMContext):
    """Handle resume invite callback"""
    invite_id = int(callback.data.split(':')[1])
    invite = db.get_invite(invite_id)
    
    if not invite:
        try:
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ—Ü–µ—Å—Å –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=back_button("inviting")
            )
        except Exception as e:
            if "message is not modified" not in str(e):
                raise
        await callback.answer()
        return
    
    account = db.get_account(invite['account_id'])
    target_chat = db.get_target_chat(invite['target_chat_id'])
    
    account_phone = account['phone'] if account else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç"
    target_chat_title = target_chat['title'] if target_chat else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç"
    
    db.update_invite_status(invite_id, active=True)
    
    ACTIVE_INVITES[invite_id] = True
    logging.info(f"Marked invite {invite_id} as active in global registry")
    
    try:
        await callback.message.edit_text(
            "‚ñ∂Ô∏è –ò–Ω–≤–∞–π—Ç–∏–Ω–≥ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω\n\n"
            f"üì± –ê–∫–∫–∞—É–Ω—Ç: {account_phone}\n"
            f"üí¨ –ß–∞—Ç: {target_chat_title}\n"
            f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {invite['current_invited']}/{invite['total_users']}",
            reply_markup=back_button("inviting")
        )
    except Exception as e:
        if "message is not modified" not in str(e):
            raise
    
    asyncio.create_task(process_invite(invite_id))
    
    await callback.answer()


@router.callback_query(F.data.startswith("delete_invite:"))
async def callback_delete_invite(callback: CallbackQuery, state: FSMContext):
    """Handle delete invite callback"""
    invite_id = int(callback.data.split(':')[1])
    invite = db.get_invite(invite_id)
    
    if not invite:
        try:
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ—Ü–µ—Å—Å –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=back_button("inviting")
            )
        except Exception as e:
            if "message is not modified" not in str(e):
                raise
        await callback.answer()
        return
    
    account = db.get_account(invite['account_id'])
    target_chat = db.get_target_chat(invite['target_chat_id'])
    
    account_phone = account['phone'] if account else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç"
    target_chat_title = target_chat['title'] if target_chat else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç"
    
    ACTIVE_INVITES[invite_id] = False
    logging.info(f"Marked invite {invite_id} for stopping before deletion in global registry")
    
    try:
        await callback.message.edit_text(
            "üóëÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞?\n\n"
            f"üì± –ê–∫–∫–∞—É–Ω—Ç: {account_phone}\n"
            f"üí¨ –ß–∞—Ç: {target_chat_title}\n"
            f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {invite['current_invited']}/{invite['total_users']}",
            reply_markup=yes_no_keyboard("delete_invite", invite_id)
        )
    except Exception as e:
        if "message is not modified" not in str(e):
            raise
    await callback.answer()


@router.callback_query(F.data.startswith("confirm_delete_invite:"))
async def callback_confirm_delete_invite(callback: CallbackQuery, state: FSMContext):
    """Handle delete invite confirmation"""
    invite_id = int(callback.data.split(':')[1])
    
    db.delete_invite(invite_id)
    
    if invite_id in ACTIVE_INVITES:
        del ACTIVE_INVITES[invite_id]
        logging.info(f"Removed invite {invite_id} from global registry")
    
    try:
        await callback.message.edit_text(
            "‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.",
            reply_markup=back_button("inviting")
        )
    except Exception as e:
        if "message is not modified" not in str(e):
            raise
    await callback.answer()


async def process_invite(invite_id):
    """Process invite in background"""
    logging.info(f"Starting invite process for invite_id={invite_id}")
    
    ACTIVE_INVITES[invite_id] = True
    
    invite = db.get_invite(invite_id)
    if not invite:
        logging.error(f"Invite with id={invite_id} not found")
        if invite_id in ACTIVE_INVITES:
            del ACTIVE_INVITES[invite_id]
        return
    
    account = db.get_account(invite['account_id'])
    target_chat = db.get_target_chat(invite['target_chat_id'])
    parsed_file = db.get_parsed_file(invite['parsed_file_id'])
    
    if not all([account, target_chat, parsed_file]):
        logging.error(f"Missing required data for invite_id={invite_id}. Account: {bool(account)}, Target chat: {bool(target_chat)}, Parsed file: {bool(parsed_file)}")
        db.update_invite_status(invite_id, active=False)
        if invite_id in ACTIVE_INVITES:
            del ACTIVE_INVITES[invite_id]
        return
    
    settings = db.get_invite_settings()
    min_interval = settings['invite_interval_min']
    max_interval = settings['invite_interval_max']
    max_invites_12h = settings['max_invites_per_12h']
    max_invites_24h = settings['max_invites_per_24h']
    
    logging.info(f"Invite settings: min_interval={min_interval}, max_interval={max_interval}, max_invites_12h={max_invites_12h}, max_invites_24h={max_invites_24h}")
    
    parsed_users = db.get_parsed_users(parsed_file['id'])
    
    start_index = invite['current_invited']
    filtered_users = []
    for user in parsed_users[start_index:]:
        if user['user_id'] != 123456789 and isinstance(user['user_id'], int) and user['user_id'] > 0:
            filtered_users.append(user)
        else:
            logging.warning(f"Skipping invalid user ID: {user['user_id']}")
            db.update_invite_progress(invite_id, start_index + 1)
            start_index += 1
    
    users_to_invite = filtered_users
    
    logging.info(f"Starting inviting from index {start_index}, total users to invite: {len(users_to_invite)}")
    
    client = client_manager.get_client(account['phone'])
    if not client:
        logging.error(f"Failed to get client for phone {account['phone']}")
        db.update_invite_status(invite_id, active=False)
        if invite_id in ACTIVE_INVITES:
            del ACTIVE_INVITES[invite_id]
        return
    
    if not client.is_connected() or not client._authorized:
        logging.error(f"Client is not connected or not authorized. Connected: {client.is_connected()}, Authorized: {client._authorized}")
        db.update_invite_status(invite_id, active=False)
        if invite_id in ACTIVE_INVITES:
            del ACTIVE_INVITES[invite_id]
        return
    
    invite_count = 0
    error_count = 0
    
    try:
        chat_entity = await client.get_entity(target_chat['chat_id'])
        logging.info(f"Successfully got entity for target chat {target_chat['title']} (ID: {target_chat['chat_id']})")
    except Exception as e:
        logging.error(f"Error getting target chat entity: {str(e)}")
        db.update_invite_status(invite_id, active=False)
        if invite_id in ACTIVE_INVITES:
            del ACTIVE_INVITES[invite_id]
        return
    
    for i, user in enumerate(users_to_invite):
        if invite_id in ACTIVE_INVITES and not ACTIVE_INVITES[invite_id]:
            logging.info(f"Invite {invite_id} stopped via global registry")
            break
        
        if i % 5 == 0:
            invite = db.get_invite(invite_id)
            if not invite or not invite['active']:
                logging.info(f"Invite is no longer active, stopping process")
                break
        
        invites_12h = db.get_invites_count_for_period(period_hours=12)
        invites_24h = db.get_invites_count_for_period(period_hours=24)
        
        logging.info(f"Current invite counts: 12h={invites_12h}/{max_invites_12h}, 24h={invites_24h}/{max_invites_24h}")
        
        if invites_12h >= max_invites_12h or invites_24h >= max_invites_24h:
            logging.warning(f"Invite limits reached: 12h={invites_12h}/{max_invites_12h}, 24h={invites_24h}/{max_invites_24h}")
            db.update_invite_status(invite_id, active=False)
            ACTIVE_INVITES[invite_id] = False
            break
        
        try:
            user_entity = await client.get_entity(user['user_id'])
            logging.info(f"Adding user {user['user_id']} to chat {target_chat['title']}")
            
            if isinstance(chat_entity, Channel):
                await client(InviteToChannelRequest(
                    channel=chat_entity,
                    users=[user_entity]
                ))
            else:
                await client(AddChatUserRequest(
                    chat_id=chat_entity.id,
                    user_id=user_entity,
                    fwd_limit=100
                ))
            
            db.update_invite_progress(invite_id, start_index + i + 1)
            db.add_invite_log(
                account_id=account['id'],
                target_chat_id=target_chat['id'],
                user_id=user['user_id'],
                status="success"
            )
            invite_count += 1
            logging.info(f"Successfully invited user {user['user_id']} ({invite_count} total)")
            
        except (UserPrivacyRestrictedError, FloodWaitError, ChatAdminRequiredError) as e:
            error_count += 1
            error_type = type(e).__name__
            logging.error(f"Error inviting user {user['user_id']}: {error_type} - {str(e)}")
            
            db.add_invite_log(
                account_id=account['id'],
                target_chat_id=target_chat['id'],
                user_id=user['user_id'],
                status="error",
                error_message=str(e)
            )
            
            db.update_invite_progress(invite_id, start_index + i + 1)
            
            if isinstance(e, FloodWaitError):
                logging.warning(f"FloodWaitError detected, pausing invite process")
                db.update_invite_status(invite_id, active=False)
                ACTIVE_INVITES[invite_id] = False
                break
                
        except Exception as e:
            error_count += 1
            logging.error(f"Unexpected error inviting user {user['user_id']}: {type(e).__name__} - {str(e)}")
            
            db.update_invite_progress(invite_id, start_index + i + 1)
            
            db.add_invite_log(
                account_id=account['id'],
                target_chat_id=target_chat['id'],
                user_id=user['user_id'],
                status="error",
                error_message=str(e)
            )
            
            if "authorized" in str(e).lower() or "connection" in str(e).lower():
                logging.warning("Critical error detected, pausing invite process")
                db.update_invite_status(invite_id, active=False)
                ACTIVE_INVITES[invite_id] = False
                break
        
        if invite_id in ACTIVE_INVITES and not ACTIVE_INVITES[invite_id]:
            logging.info(f"Invite {invite_id} stopped during processing")
            break
            
        interval = random.randint(min_interval, max_interval)
        logging.info(f"Waiting {interval} seconds before next invite")
        
        for _ in range(interval):
            if invite_id in ACTIVE_INVITES and not ACTIVE_INVITES[invite_id]:
                logging.info(f"Invite {invite_id} stopped during wait interval")
                break
            await asyncio.sleep(1)
    
    if invite_count > 0 or error_count > 0:
        logging.info(f"Invite process summary: invited={invite_count}, errors={error_count}")
        db.add_invite_summary_log(
            account_id=account['id'],
            target_chat_id=target_chat['id'],
            invited_count=invite_count,
            errors_count=error_count
        )
    
    invite = db.get_invite(invite_id)
    if invite and invite['current_invited'] >= invite['total_users']:
        logging.info(f"All users invited, marking invite as completed")
        db.complete_invite(invite_id)
        if invite_id in ACTIVE_INVITES:
            del ACTIVE_INVITES[invite_id]
    elif invite_id in ACTIVE_INVITES and not ACTIVE_INVITES[invite_id]:
        logging.info(f"Invite {invite_id} marked as stopped at the end of process")
    
    if invite_id in ACTIVE_INVITES:
        del ACTIVE_INVITES[invite_id] 

async def update_inviting_progress(message, invite_id, current, total):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏"""
    invite = db.get_invite(invite_id)
    if not invite:
        return
    
    account = db.get_account(invite['account_id'])
    target_chat = db.get_target_chat(invite['target_chat_id'])
    
    account_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç"
    if account:
        account_name = f"{account['first_name']} {account['last_name']}".strip()
        if not account_name:
            account_name = account['phone']
    
    target_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç"
    if target_chat:
        target_name = target_chat['title']
    
    text = f"üîÑ –ü–†–û–ì–†–ï–°–° –ò–ù–í–ê–ô–¢–ò–ù–ì–ê\n\n"
    text += f"üë§ –ê–∫–∫–∞—É–Ω—Ç: {account_name}\n"
    text += f"üì£ –ß–∞—Ç: {target_name}\n\n"
    
    # –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    percent = int((current / total) * 100) if total > 0 else 0
    progress_bar = "‚ñì" * (percent // 5) + "‚ñë" * (20 - (percent // 5))
    
    text += f"–ü—Ä–æ–≥—Ä–µ—Å—Å: [{progress_bar}] {percent}%\n"
    text += f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ {current} –∏–∑ {total} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
    
    kb = InlineKeyboardBuilder()
    kb.button(text="‚è∏ –ü–†–ò–û–°–¢–ê–ù–û–í–ò–¢–¨", callback_data=f"pause_invite:{invite_id}")
    kb.button(text="üîô –ù–ê–ó–ê–î", callback_data="inviting")
    kb.button(text="üîô –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ", callback_data="main_menu")
    kb.adjust(1)
    
    try:
        await message.edit_text(text, reply_markup=kb.as_markup(), parse_mode="HTML")
    except Exception as e:
        if "message is not modified" not in str(e):
            logging.error(f"Error updating inviting progress: {e}")

# –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é start_inviting, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
async def start_inviting(message, invite_id):
    """Start inviting process"""
    invite = db.get_invite(invite_id)
    if not invite:
        return "‚ùå –ü—Ä–æ—Ü–µ—Å—Å –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω."
    
    account_id = invite['account_id']
    target_chat_id = invite['target_chat_id']
    parsed_file_id = invite['parsed_file_id']
    
    account = db.get_account(account_id)
    target_chat = db.get_target_chat(target_chat_id)
    parsed_file = db.get_parsed_file(parsed_file_id)
    
    if not account or not target_chat or not parsed_file:
        return "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞."
    
    client = client_manager.get_client(account['phone'])
    if not client:
        return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∞–∫–∫–∞—É–Ω—Ç—É {account['phone']}."
    
    invite_settings = db.get_invite_settings()
    min_interval = invite_settings.get('min_interval_seconds', 30)
    max_interval = invite_settings.get('max_interval_seconds', 60)
    max_invites_12h = invite_settings.get('max_invites_12h', 25)
    max_invites_24h = invite_settings.get('max_invites_24h', 40)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞
    users = db.get_parsed_users(parsed_file_id, limit=1000, offset=invite['current_invited'])
    
    if not users:
        return "‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ –±—ã–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –∏–ª–∏ –≤ —Ñ–∞–π–ª–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
    await update_inviting_progress(message, invite_id, invite['current_invited'], invite['total_users'])
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞
    db.update_invite(invite_id, {'active': True})
    ACTIVE_INVITES[invite_id] = True
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞
    try:
        for user in users:
            if not ACTIVE_INVITES.get(invite_id, False):
                break
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
            invites_12h = db.count_user_invites_period(account_id, hours=12)
            invites_24h = db.count_user_invites_period(account_id, hours=24)
            
            if invites_12h >= max_invites_12h:
                await update_inviting_progress(message, invite_id, invite['current_invited'], invite['total_users'])
                return f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –∑–∞ 12 —á–∞—Å–æ–≤ ({max_invites_12h})."
                
            if invites_24h >= max_invites_24h:
                await update_inviting_progress(message, invite_id, invite['current_invited'], invite['total_users'])
                return f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –∑–∞ 24 —á–∞—Å–∞ ({max_invites_24h})."
                
            user_id = user['user_id']
            username = user.get('username', None)
            
            success = False
            error_msg = ""
            
            try:
                if target_chat['is_channel'] or target_chat['is_group']:
                    await client(InviteToChannelRequest(
                        channel=target_chat['chat_id'],
                        users=[user_id if isinstance(user_id, str) else int(user_id)]
                    ))
                else:
                    await client(AddChatUserRequest(
                        chat_id=target_chat['chat_id'],
                        user_id=user_id if isinstance(user_id, str) else int(user_id),
                        fwd_limit=100
                    ))
                success = True
            except UserPrivacyRestrictedError:
                error_msg = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–µ—Ç–∏–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—ã"
            except FloodWaitError as e:
                error_msg = f"Flood wait: {e.seconds} seconds"
                # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–∏ —Ñ–ª—É–¥-–≤–µ–π—Ç–µ
                db.update_invite(invite_id, {'active': False})
                ACTIVE_INVITES[invite_id] = False
                return f"‚ö†Ô∏è Flood wait: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å {e.seconds} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º."
            except ChatAdminRequiredError:
                error_msg = "–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞: {str(e)}"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            current_invited = invite['current_invited'] + 1
            db.update_invite(invite_id, {'current_invited': current_invited})
            
            if success:
                db.add_invite_log(invite_id, user_id, success=True)
            else:
                db.add_invite_log(invite_id, user_id, success=False, error=error_msg)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∫–∞–∂–¥—ã–µ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if current_invited % 5 == 0 or current_invited == invite['total_users']:
                await update_inviting_progress(message, invite_id, current_invited, invite['total_users'])
            
            # –°–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º–∏
            await asyncio.sleep(random.randint(min_interval, max_interval))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
            invite_check = db.get_invite(invite_id)
            if not invite_check['active']:
                break
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        invite = db.get_invite(invite_id)
        await update_inviting_progress(message, invite_id, invite['current_invited'], invite['total_users'])
        
        if invite['current_invited'] >= invite['total_users']:
            return "‚úÖ –ò–Ω–≤–∞–π—Ç–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—ã–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã."
        else:
            return f"‚úÖ –ò–Ω–≤–∞–π—Ç–∏–Ω–≥ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ {invite['current_invited']} –∏–∑ {invite['total_users']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
    
    except Exception as e:
        logging.error(f"Error in inviting process: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞: {str(e)}"
    finally:
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π
        if invite_id in ACTIVE_INVITES:
            ACTIVE_INVITES[invite_id] = False 