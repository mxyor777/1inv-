from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
import logging
import asyncio

from database import db
from telegram_client import client_manager
from inviter import inviter
from bot.keyboards import (
    parsing_keyboard, 
    parsed_file_actions_keyboard,
    back_button,
    main_menu_keyboard,
    yes_no_keyboard,
    choose_account_keyboard,
    parsing_menu_keyboard
)

router = Router()

class ParsingStates(StatesGroup):
    waiting_for_chat_selection = State()
    waiting_for_account_selection = State()
    waiting_for_parse_type = State()


@router.callback_query(F.data == "parsing")
async def callback_parsing(callback: CallbackQuery, state: FSMContext):
    """Handle parsing menu callback"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(previous_menu='parsing')
    await state.clear()
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é –ø–∞—Ä—Å–∏–Ω–≥–∞
    try:
        await callback.message.edit_text(
            "üìä –ü–ê–†–°–ò–ù–ì\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=parsing_menu_keyboard(),
            parse_mode="HTML"
        )
    except Exception as e:
        if "message is not modified" not in str(e):
            raise
    
    await callback.answer()


@router.callback_query(F.data == "parsing_results")
async def callback_parsing_results(callback: CallbackQuery, state: FSMContext):
    """Handle parsing results menu callback"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(previous_menu='parsing')
    
    parsed_files = db.get_parsed_files()
    
    if not parsed_files:
        try:
            await callback.message.edit_text(
                "üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–ê–†–°–ò–ù–ì–ê\n\n"
                "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞.\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª \"–ß–∞—Ç—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞\".",
                reply_markup=parsing_keyboard(),
                parse_mode="HTML"
            )
        except Exception as e:
            if "message is not modified" not in str(e):
                raise
    else:
        text = "üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–ê–†–°–ò–ù–ì–ê\n\n"
        text += "–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞:"
        
        try:
            await callback.message.edit_text(
                text,
                reply_markup=parsing_keyboard(parsed_files),
                parse_mode="HTML"
            )
        except Exception as e:
            if "message is not modified" not in str(e):
                raise
    
    await callback.answer()


@router.callback_query(F.data == "view_parsed_files")
async def callback_view_parsed_files(callback: CallbackQuery, state: FSMContext):
    """Handle view parsed files menu callback"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(previous_menu='parsing')
    
    parsed_files = db.get_parsed_files()
    
    if not parsed_files:
        try:
            await callback.message.edit_text(
                "üìÇ –ü–†–û–°–ú–û–¢–† –§–ê–ô–õ–û–í\n\n"
                "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞.\n"
                "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª \"–ß–∞—Ç—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞\".",
                reply_markup=back_button("parsing"),
                parse_mode="HTML"
            )
        except Exception as e:
            if "message is not modified" not in str(e):
                raise
    else:
        text = "üìÇ –ü–†–û–°–ú–û–¢–† –§–ê–ô–õ–û–í\n\n"
        text += "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞:"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ñ–∞–π–ª–∞–º–∏
        kb = InlineKeyboardBuilder()
        for file in parsed_files:
            name = file['file_name'].split('_')[0]
            count = file['total_users']
            kb.button(text=f"{name} ({count})", callback_data=f"download_file:{file['id']}")
        
        kb.button(text="üîô –ù–ê–ó–ê–î", callback_data="parsing")
        kb.button(text="üîô –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ", callback_data="main_menu")
        kb.adjust(1)
        
        try:
            await callback.message.edit_text(
                text,
                reply_markup=kb.as_markup(),
                parse_mode="HTML"
            )
        except Exception as e:
            if "message is not modified" not in str(e):
                raise
    
    await callback.answer()


def start_parsing_keyboard(parsed_files=None):
    """Create start parsing keyboard"""
    kb = InlineKeyboardBuilder()
    
    if parsed_files:
        for file in parsed_files:
            name = file['chat_title']
            count = file['total_users']
            parse_type = "–£—á–∞—Å—Ç–Ω–∏–∫–∏" if file['parse_type'] == "members" else "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —á–∞—Ç–µ (90 –¥–Ω–µ–π)"
            kb.button(text=f"{name} | {parse_type} ({count})", callback_data=f"parsed_file:{file['id']}")
    
    kb.button(text="‚ûï –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥", callback_data="start_new_parsing")
    kb.button(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    kb.adjust(1)
    return kb.as_markup()


@router.callback_query(F.data == "start_new_parsing")
async def callback_start_new_parsing(callback: CallbackQuery, state: FSMContext):
    """Handle start new parsing callback"""
    source_chats = db.get_source_chats()
    
    if not source_chats:
        try:
            await callback.message.edit_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏—Å—Ö–æ–¥–Ω—ã—Ö —á–∞—Ç–æ–≤.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —á–∞—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ '–ß–∞—Ç—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞'.",
                reply_markup=back_button("parsing")
            )
        except Exception as e:
            if "message is not modified" not in str(e):
                raise
        await callback.answer()
        return
    
    await state.set_state(ParsingStates.waiting_for_chat_selection)
    
    text = "üîç –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞:\n\n"
    
    kb = InlineKeyboardBuilder()
    for chat in source_chats:
        kb.button(
            text=f"{chat['title']} ({chat['total_members']} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)", 
            callback_data=f"parse_chat:{chat['id']}"
        )
    
    kb.button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="parsing")
    kb.adjust(1)
    
    try:
        await callback.message.edit_text(text, reply_markup=kb.as_markup())
    except Exception as e:
        if "message is not modified" not in str(e):
            raise
    await callback.answer()


@router.callback_query(ParsingStates.waiting_for_chat_selection, F.data.startswith("parse_chat:"))
async def callback_select_chat_for_parsing(callback: CallbackQuery, state: FSMContext):
    """Handle chat selection for parsing"""
    logger = logging.getLogger(__name__)
    logger.info(f"PARSING HANDLER: Callback data: {callback.data}, Current state: {await state.get_state()}")
    
    chat_id = int(callback.data.split(':')[1])
    chat = db.get_source_chat(chat_id)
    
    if not chat:
        try:
            await callback.message.edit_text(
                "‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=back_button("parsing")
            )
        except Exception as e:
            if "message is not modified" not in str(e):
                raise
        await callback.answer()
        return
    
    await state.update_data(chat_id=chat_id)
    
    await state.set_state(ParsingStates.waiting_for_parse_type)
    
    kb = InlineKeyboardBuilder()
    kb.button(text="üë• –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏", callback_data="parse_type:members")
    kb.button(text="üí¨ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —á–∞—Ç–µ (90 –¥–Ω–µ–π)", callback_data="parse_type:active")
    kb.button(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="parsing")
    kb.adjust(1)
    
    try:
        await callback.message.edit_text(
            "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è —á–∞—Ç–∞ {chat['title']}:",
            reply_markup=kb.as_markup()
        )
    except Exception as e:
        if "message is not modified" not in str(e):
            raise
    await callback.answer()


@router.callback_query(ParsingStates.waiting_for_parse_type, F.data.startswith("parse_type:"))
async def callback_select_parse_type(callback: CallbackQuery, state: FSMContext):
    """Handle parse type selection"""
    parse_type = callback.data.split(':')[1]
    
    await state.update_data(parse_type=parse_type)
    
    accounts = db.get_accounts()
    if not accounts:
        try:
            await callback.message.edit_text(
                "‚ùå –î–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç.",
                reply_markup=back_button("parsing")
            )
        except Exception as e:
            if "message is not modified" not in str(e):
                raise
        await callback.answer()
        return
    
    await state.set_state(ParsingStates.waiting_for_account_selection)
    
    try:
        await callback.message.edit_text(
            "üë§ –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞:",
            reply_markup=choose_account_keyboard(accounts)
        )
    except Exception as e:
        if "message is not modified" not in str(e):
            raise
    await callback.answer()


@router.callback_query(ParsingStates.waiting_for_account_selection, F.data.startswith("select_account:"))
async def callback_select_account_for_parsing(callback: CallbackQuery, state: FSMContext):
    """Handle account selection for parsing"""
    account_id = int(callback.data.split(':')[1])
    account = db.get_account(account_id)
    
    if not account:
        try:
            await callback.message.edit_text(
                "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=back_button("parsing")
            )
        except Exception as e:
            if "message is not modified" not in str(e):
                raise
        await callback.answer()
        return
    
    data = await state.get_data()
    chat_id = data.get('chat_id')
    parse_type = data.get('parse_type')
    
    if not chat_id or not parse_type:
        try:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                reply_markup=back_button("parsing")
            )
        except Exception as e:
            if "message is not modified" not in str(e):
                raise
        await callback.answer()
        await state.clear()
        return
    
    chat = db.get_source_chat(chat_id)
    if not chat:
        try:
            await callback.message.edit_text(
                "‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=back_button("parsing")
            )
        except Exception as e:
            if "message is not modified" not in str(e):
                raise
        await callback.answer()
        await state.clear()
        return
    
    parse_type_text = "—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤" if parse_type == "members" else "–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    
    try:
        await callback.message.edit_text(
            f"‚è≥ –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ {parse_type_text} —á–∞—Ç–∞ {chat['title']}...\n"
            f"–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —á–∞—Ç–∞."
        )
    except Exception as e:
        if "message is not modified" not in str(e):
            raise
    
    success, result = await inviter.parse_chat(account['phone'], chat_id, parse_type)
    
    if success:
        filename = result['filename']
        total_users = result['total_users']
        chat_title = result['chat_title']
        
        try:
            await callback.message.edit_text(
                f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ {parse_type_text} —á–∞—Ç–∞ {chat_title} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
                f"–§–∞–π–ª: {filename}\n"
                f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n",
                reply_markup=back_button("parsing")
            )
        except Exception as e:
            if "message is not modified" not in str(e):
                raise
    else:
        try:
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {parse_type_text}:\n{result}",
                reply_markup=back_button("parsing")
            )
        except Exception as e:
            if "message is not modified" not in str(e):
                raise
    
    await state.clear()


@router.callback_query(F.data.startswith("parsed_file:"))
async def callback_parsed_file_details(callback: CallbackQuery, state: FSMContext):
    """Handle parsed file details callback"""
    file_id = int(callback.data.split(':')[1])
    parsed_file = db.get_parsed_file(file_id)
    
    if not parsed_file:
        try:
            await callback.message.edit_text(
                "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=parsing_keyboard()
            )
        except Exception as e:
            if "message is not modified" not in str(e):
                raise
        await callback.answer()
        return
    
    source_chat = db.get_source_chat(parsed_file['source_chat_id'])
    chat_title = source_chat['title'] if source_chat else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç"
    
    file_name = parsed_file['file_name']
    total_users = parsed_file['total_users']
    parse_type = "–£—á–∞—Å—Ç–Ω–∏–∫–∏" if parsed_file['parse_type'] == "members" else "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —á–∞—Ç–µ (90 –¥–Ω–µ–π)"
    added_date = datetime.fromtimestamp(parsed_file['added_date']).strftime('%d.%m.%y')
    
    text = f"üìä –§–∞–π–ª —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n\n"
    text += f"–ß–∞—Ç: {chat_title}\n"
    text += f"–¢–∏–ø –ø–∞—Ä—Å–∏–Ω–≥–∞: {parse_type}\n"
    text += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
    text += f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {added_date}\n"
    text += f"–§–∞–π–ª: {file_name}\n"
    
    try:
        await callback.message.edit_text(
            text,
            reply_markup=parsed_file_actions_keyboard(file_id)
        )
    except Exception as e:
        if "message is not modified" not in str(e):
            raise
    await callback.answer()


@router.callback_query(F.data.startswith("use_for_inviting:"))
async def callback_use_for_inviting(callback: CallbackQuery, state: FSMContext):
    """Handle use for inviting callback"""
    file_id = int(callback.data.split(':')[1])
    parsed_file = db.get_parsed_file(file_id)
    
    if not parsed_file:
        try:
            await callback.message.edit_text(
                "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=parsing_keyboard()
            )
        except Exception as e:
            if "message is not modified" not in str(e):
                raise
        await callback.answer()
        return
    
    try:
        await callback.message.edit_text(
            "üì£ –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π —á–∞—Ç –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞\n\n"
            f"–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ñ–∞–π–ª: {parsed_file['file_name']}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {parsed_file['total_users']}\n\n"
            "–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ —Ä–∞–∑–¥–µ–ª '–ß–∞—Ç—ã –¥–ª—è –∏–Ω–≤–∞–π—Ç–∞'..."
        )
    except Exception as e:
        if "message is not modified" not in str(e):
            raise
    
    await callback.bot.callback_query(callback.message.chat.id, callback.message.message_id, data="target_chats")
    await callback.answer()


@router.callback_query(F.data.startswith("delete_parsed_file:"))
async def callback_delete_parsed_file(callback: CallbackQuery, state: FSMContext):
    """Handle delete parsed file callback"""
    file_id = int(callback.data.split(':')[1])
    parsed_file = db.get_parsed_file(file_id)
    
    if not parsed_file:
        try:
            await callback.message.edit_text(
                "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=parsing_keyboard()
            )
        except Exception as e:
            if "message is not modified" not in str(e):
                raise
        await callback.answer()
        return
    
    try:
        await callback.message.edit_text(
            f"üóëÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {parsed_file['file_name']}?",
            reply_markup=yes_no_keyboard("delete_parsed_file", file_id)
        )
    except Exception as e:
        if "message is not modified" not in str(e):
            raise
    await callback.answer()


@router.callback_query(F.data.startswith("confirm_delete_parsed_file:"))
async def callback_confirm_delete_parsed_file(callback: CallbackQuery, state: FSMContext):
    """Handle delete parsed file confirmation"""
    file_id = int(callback.data.split(':')[1])
    parsed_file = db.get_parsed_file(file_id)
    
    if not parsed_file:
        try:
            await callback.message.edit_text(
                "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=parsing_keyboard()
            )
        except Exception as e:
            if "message is not modified" not in str(e):
                raise
        await callback.answer()
        return
    
    file_name = parsed_file['file_name']
    db.delete_parsed_file(file_id)
    
    try:
        await callback.message.edit_text(
            f"‚úÖ –§–∞–π–ª {file_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.",
            reply_markup=back_button("parsing")
        )
    except Exception as e:
        if "message is not modified" not in str(e):
            raise
    await callback.answer()


async def update_parsing_progress(message, chat_id, current, total, parse_type):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏"""
    chat = db.get_source_chat(chat_id)
    if not chat:
        return
    
    account = db.get_account(chat.get('account_id'))
    
    account_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç"
    if account:
        account_name = f"{account['first_name']} {account['last_name']}".strip()
        if not account_name:
            account_name = account['phone']
    
    chat_name = chat.get('title', "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç")
    
    text = f"üìä –ü–†–û–ì–†–ï–°–° –ü–ê–†–°–ò–ù–ì–ê\n\n"
    text += f"üë§ –ê–∫–∫–∞—É–Ω—Ç: {account_name}\n"
    text += f"üîç –ß–∞—Ç: {chat_name}\n"
    text += f"–¢–∏–ø –ø–∞—Ä—Å–∏–Ω–≥–∞: {'–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —á–∞—Ç–µ' if parse_type == 'active' else '–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏'}\n\n"
    
    # –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    percent = int((current / total) * 100) if total > 0 else 0
    progress_bar = "‚ñì" * (percent // 5) + "‚ñë" * (20 - (percent // 5))
    
    text += f"–ü—Ä–æ–≥—Ä–µ—Å—Å: [{progress_bar}] {percent}%\n"
    text += f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {current} –∏–∑ {total} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
    
    kb = InlineKeyboardBuilder()
    kb.button(text="‚è∏ –ü–†–ò–û–°–¢–ê–ù–û–í–ò–¢–¨", callback_data=f"pause_parsing:{chat_id}")
    kb.button(text="üîô –ù–ê–ó–ê–î", callback_data="parsing")
    kb.button(text="üîô –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ", callback_data="main_menu")
    kb.adjust(1)
    
    try:
        await message.edit_text(text, reply_markup=kb.as_markup(), parse_mode="HTML")
    except Exception as e:
        if "message is not modified" not in str(e):
            logging.error(f"Error updating parsing progress: {e}")


@router.callback_query(F.data.startswith("start_parse_chat:"))
async def callback_start_parse_chat(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ —á–∞—Ç–∞"""
    chat_id = int(callback.data.split(':')[1])
    chat = db.get_source_chat(chat_id)
    
    if not chat:
        await callback.message.edit_text(
            "‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=back_button("source_chats"),
            parse_mode="HTML"
        )
        await callback.answer()
        return
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
    kb = InlineKeyboardBuilder()
    kb.button(text="üë• –í–°–ï –£–ß–ê–°–¢–ù–ò–ö–ò", callback_data=f"parse_type:{chat_id}:members")
    kb.button(text="üí¨ –ê–ö–¢–ò–í–ù–û–°–¢–¨ –í –ß–ê–¢–ï (90 –î–ù–ï–ô)", callback_data=f"parse_type:{chat_id}:active")
    kb.button(text="üîô –ù–ê–ó–ê–î", callback_data=f"source_chat:{chat_id}")
    kb.adjust(1)
    
    await callback.message.edit_text(
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è —á–∞—Ç–∞ {chat['title']}:",
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("parse_type:"))
async def callback_parse_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    parts = callback.data.split(':')
    chat_id = int(parts[1])
    parse_type = parts[2]
    
    chat = db.get_source_chat(chat_id)
    if not chat:
        await callback.message.edit_text(
            "‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=back_button("source_chats"),
            parse_mode="HTML"
        )
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
    account_id = chat.get('account_id')
    if not account_id:
        # –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —á–∞—Ç—É, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å
        accounts = db.get_accounts()
        if not accounts:
            await callback.message.edit_text(
                "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞.",
                reply_markup=back_button("source_chats"),
                parse_mode="HTML"
            )
            await callback.answer()
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –ø–∞—Ä—Å–∏–Ω–≥–∞
        await state.update_data(chat_id=chat_id, parse_type=parse_type)
        await state.set_state(ParsingStates.waiting_for_account_selection)
        
        await callback.message.edit_text(
            "üë§ –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞:",
            reply_markup=choose_account_keyboard(accounts),
            parse_mode="HTML"
        )
        await callback.answer()
        return
    
    # –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
    await callback.message.edit_text(
        "‚è≥ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —á–∞—Ç–∞ {chat['title']}...",
        parse_mode="HTML"
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–æ—Ä—É—Ç–∏–Ω–µ
    asyncio.create_task(start_parsing(callback.message, chat_id, account_id, parse_type))
    await callback.answer()


async def start_parsing(message, chat_id, account_id, parse_type):
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    chat = db.get_source_chat(chat_id)
    account = db.get_account(account_id)
    
    if not chat or not account:
        await message.edit_text(
            "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞.",
            reply_markup=back_button("source_chats"),
            parse_mode="HTML"
        )
        return
    
    client = client_manager.get_client(account['phone'])
    if not client:
        await message.edit_text(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∞–∫–∫–∞—É–Ω—Ç—É {account['phone']}.",
            reply_markup=back_button("source_chats"),
            parse_mode="HTML"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç –∫–∞–Ω–∞–ª–æ–º –∏–ª–∏ –≥—Ä—É–ø–ø–æ–π
    try:
        entity = await client.get_entity(chat['chat_id'])
        total_members = 0
        
        if hasattr(entity, 'participants_count'):
            total_members = entity.participants_count
        else:
            # –ï—Å–ª–∏ —Å—á–µ—Ç—á–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Ü–µ–Ω–∏–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ
            total_members = 100
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        await update_parsing_progress(message, chat_id, 0, total_members, parse_type)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
        parsed_users = []
        current_count = 0
        
        if parse_type == 'members':
            # –ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            async for user in client.iter_participants(entity):
                current_count += 1
                if current_count % 10 == 0:  # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    await update_parsing_progress(message, chat_id, current_count, total_members, parse_type)
                
                if user.bot:
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–æ—Ç–æ–≤
                
                user_data = {
                    'user_id': user.id,
                    'access_hash': user.access_hash,
                    'username': user.username,
                    'first_name': user.first_name if hasattr(user, 'first_name') else None,
                    'last_name': user.last_name if hasattr(user, 'last_name') else None,
                    'phone': user.phone if hasattr(user, 'phone') else None,
                    'bot': user.bot if hasattr(user, 'bot') else False
                }
                parsed_users.append(user_data)
        
        elif parse_type == 'active':
            # –ü–∞—Ä—Å–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 90 –¥–Ω–µ–π)
            async for message in client.iter_messages(entity, limit=1000):
                if message.sender_id and message.sender_id > 0:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–∫–µ
                    if not any(u['user_id'] == message.sender_id for u in parsed_users):
                        try:
                            user = await client.get_entity(message.sender_id)
                            current_count += 1
                            
                            if current_count % 5 == 0:  # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                                await update_parsing_progress(message, chat_id, current_count, total_members, parse_type)
                            
                            if user.bot:
                                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–æ—Ç–æ–≤
                            
                            user_data = {
                                'user_id': user.id,
                                'access_hash': user.access_hash,
                                'username': user.username,
                                'first_name': user.first_name if hasattr(user, 'first_name') else None,
                                'last_name': user.last_name if hasattr(user, 'last_name') else None,
                                'phone': user.phone if hasattr(user, 'phone') else None,
                                'bot': user.bot if hasattr(user, 'bot') else False
                            }
                            parsed_users.append(user_data)
                        except Exception as e:
                            logging.error(f"Error parsing active user: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞
        file_name = f"{chat['title']}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        file_id = db.save_parsed_file(
            file_name=file_name,
            source_chat_id=chat_id,
            total_users=len(parsed_users),
            parse_type=parse_type
        )
        
        if file_id:
            for user_data in parsed_users:
                db.add_parsed_user(file_id, user_data)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            db.update_source_chat(chat_id, {
                'total_members': total_members,
                'parsed_members': len(parsed_users)
            })
            
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            await update_parsing_progress(message, chat_id, len(parsed_users), total_members, parse_type)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            kb = InlineKeyboardBuilder()
            kb.button(text="ÔøΩÔøΩ –ü–†–û–°–ú–û–¢–†–ï–¢–¨ –†–ï–ó–£–õ–¨–¢–ê–¢–´", callback_data=f"parsed_file:{file_id}")
            kb.button(text="üîô –ù–ê–ó–ê–î", callback_data="parsing")
            kb.button(text="üîô –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ", callback_data="main_menu")
            kb.adjust(1)
            
            await message.edit_text(
                "‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
                "–ß–∞—Ç: {chat['title']}\n"
                "–¢–∏–ø –ø–∞—Ä—Å–∏–Ω–≥–∞: {'–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —á–∞—Ç–µ' if parse_type == 'active' else '–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏'}\n"
                "–°–æ–±—Ä–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(parsed_users)}\n",
                reply_markup=kb.as_markup(),
                parse_mode="HTML"
            )
        else:
            await message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞.",
                reply_markup=back_button("parsing"),
                parse_mode="HTML"
            )
    
    except Exception as e:
        logging.error(f"Error in parsing process: {e}")
        await message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {str(e)}",
            reply_markup=back_button("parsing"),
            parse_mode="HTML"
        )