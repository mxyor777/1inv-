from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database import db
from bot.keyboards import (
    invite_settings_keyboard,
    back_button,
    main_menu_keyboard
)

router = Router()

class InviteSettingsStates(StatesGroup):
    waiting_for_interval_min = State()
    waiting_for_interval_max = State()
    waiting_for_max_12h = State()
    waiting_for_max_24h = State()


@router.callback_query(F.data == "invite_settings")
async def callback_invite_settings(callback: CallbackQuery, state: FSMContext):
    await state.update_data(previous_menu='invite_settings')
    await state.clear()
    
    settings = db.get_invite_settings()
    
    min_interval = settings['min_interval_seconds'] if 'min_interval_seconds' in settings else 30
    max_interval = settings['max_interval_seconds'] if 'max_interval_seconds' in settings else 60
    max_invites_12h = settings['max_invites_12h'] if 'max_invites_12h' in settings else 25
    max_invites_24h = settings['max_invites_24h'] if 'max_invites_24h' in settings else 40
    
    text = "‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò –ò–ù–í–ê–ô–¢–ò–ù–ì–ê\n\n"
    text += "–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
    text += f"‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º–∏: {min_interval} - {max_interval} —Å–µ–∫.\n"
    text += f"üìä –ú–∞–∫—Å–∏–º—É–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –∑–∞ 12—á: {max_invites_12h}\n"
    text += f"üìä –ú–∞–∫—Å–∏–º—É–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –∑–∞ 24—á: {max_invites_24h}\n\n"
    
    text += "‚ö†Ô∏è –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –ë–ï–ó–û–ü–ê–°–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò:\n"
    text += "‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª: 35-70 —Å–µ–∫.\n"
    text += "üìä 12—á –º–∞–∫—Å.: 25 –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π\n"
    text += "üìä 24—á –º–∞–∫—Å.: 40 –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π\n\n"
    text += "–≠—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–º–æ–≥—É—Ç –∏–∑–±–µ–∂–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏ –æ–±–µ—Å–ø–µ—á–∞—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ä–∞–±–æ—Ç—É."
    
    try:
        await callback.message.edit_text(
            text,
            reply_markup=invite_settings_keyboard(),
            parse_mode="HTML"
        )
    except Exception as e:
        if "message is not modified" not in str(e):
            raise
    
    await callback.answer()


@router.callback_query(F.data == "set_invite_interval")
async def callback_set_invite_interval(callback: CallbackQuery, state: FSMContext):
    await state.set_state(InviteSettingsStates.waiting_for_interval_min)
    
    await callback.message.edit_text(
        "‚è±Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–µ–∂–¥—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º–∏\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–µ –º–µ–Ω–µ–µ 30):",
        reply_markup=back_button()
    )
    await callback.answer()


@router.message(InviteSettingsStates.waiting_for_interval_min)
async def handle_interval_min(message: Message, state: FSMContext):
    try:
        interval_min = int(message.text.strip())
        if interval_min < 1:
            await message.answer(
                "‚ö†Ô∏è –ó–Ω–∞—á–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ. –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã."
            )
            return
        
        await state.update_data(interval_min=interval_min)
        await state.set_state(InviteSettingsStates.waiting_for_interval_max)
        
        await message.answer(
            f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞: {interval_min} —Å–µ–∫—É–Ω–¥\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ {interval_min}):",
            reply_markup=back_button()
        )
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ."
        )


@router.message(InviteSettingsStates.waiting_for_interval_max)
async def handle_interval_max(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        interval_min = data.get('interval_min')
        
        interval_max = int(message.text.strip())
        if interval_max <= interval_min:
            await message.answer(
                f"‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ ({interval_min})."
            )
            return
        
        db.update_invite_settings(
            invite_interval_min=interval_min,
            invite_interval_max=interval_max
        )
        
        settings = db.get_invite_settings()
        
        text = "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\n"
        text += "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞\n\n"
        text += f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º–∏: {settings['invite_interval_min']}-{settings['invite_interval_max']} —Å–µ–∫—É–Ω–¥\n"
        text += f"–ú–∞–∫—Å–∏–º—É–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –∑–∞ 12—á: {settings['max_invites_per_12h']}\n"
        text += f"–ú–∞–∫—Å–∏–º—É–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –∑–∞ 24—á: {settings['max_invites_per_24h']}\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
        
        await message.answer(
            text,
            reply_markup=invite_settings_keyboard()
        )
        await state.clear()
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ."
        )


@router.callback_query(F.data == "set_max_invites_12h")
async def callback_set_max_invites_12h(callback: CallbackQuery, state: FSMContext):
    await state.set_state(InviteSettingsStates.waiting_for_max_12h)
    
    settings = db.get_invite_settings()
    max_24h = settings['max_invites_per_24h']
    
    await callback.message.edit_text(
        "üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –∑–∞ 12 —á–∞—Å–æ–≤\n\n"
        f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {settings['max_invites_per_12h']}\n"
        f"–ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è 24 —á–∞—Å–æ–≤: {max_24h}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–µ –±–æ–ª–µ–µ 40):",
        reply_markup=back_button()
    )
    await callback.answer()


@router.message(InviteSettingsStates.waiting_for_max_12h)
async def handle_max_12h(message: Message, state: FSMContext):
    try:
        max_invites_12h = int(message.text.strip())
        if max_invites_12h < 1:
            await message.answer(
                "‚ö†Ô∏è –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º."
            )
            return
        
        settings = db.get_invite_settings()
        if max_invites_12h > settings['max_invites_per_24h']:
            await message.answer(
                f"‚ö†Ô∏è –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è 12 —á–∞—Å–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è 24 —á–∞—Å–æ–≤ ({settings['max_invites_per_24h']})."
            )
            return
        
        db.update_invite_settings(
            max_invites_per_12h=max_invites_12h
        )
        
        updated_settings = db.get_invite_settings()
        
        text = "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –∑–∞ 12 —á–∞—Å–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\n"
        text += "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞\n\n"
        text += f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º–∏: {updated_settings['invite_interval_min']}-{updated_settings['invite_interval_max']} —Å–µ–∫—É–Ω–¥\n"
        text += f"–ú–∞–∫—Å–∏–º—É–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –∑–∞ 12—á: {updated_settings['max_invites_per_12h']}\n"
        text += f"–ú–∞–∫—Å–∏–º—É–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –∑–∞ 24—á: {updated_settings['max_invites_per_24h']}\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
        
        await message.answer(
            text,
            reply_markup=invite_settings_keyboard()
        )
        await state.clear()
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ."
        )


@router.callback_query(F.data == "set_max_invites_24h")
async def callback_set_max_invites_24h(callback: CallbackQuery, state: FSMContext):
    await state.set_state(InviteSettingsStates.waiting_for_max_24h)
    
    settings = db.get_invite_settings()
    max_12h = settings['max_invites_per_12h']
    
    await callback.message.edit_text(
        "üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –∑–∞ 24 —á–∞—Å–∞\n\n"
        f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {settings['max_invites_per_24h']}\n"
        f"–ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è 12 —á–∞—Å–æ–≤: {max_12h}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–µ –±–æ–ª–µ–µ 50):",
        reply_markup=back_button()
    )
    await callback.answer()


@router.message(InviteSettingsStates.waiting_for_max_24h)
async def handle_max_24h(message: Message, state: FSMContext):
    try:
        max_invites_24h = int(message.text.strip())
        if max_invites_24h < 1:
            await message.answer(
                "‚ö†Ô∏è –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º."
            )
            return
        
        settings = db.get_invite_settings()
        if max_invites_24h < settings['max_invites_per_12h']:
            await message.answer(
                f"‚ö†Ô∏è –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è 24 —á–∞—Å–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è 12 —á–∞—Å–æ–≤ ({settings['max_invites_per_12h']})."
            )
            return
        
        db.update_invite_settings(
            max_invites_per_24h=max_invites_24h
        )
        
        updated_settings = db.get_invite_settings()
        
        text = "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –∑–∞ 24 —á–∞—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\n"
        text += "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞\n\n"
        text += f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º–∏: {updated_settings['invite_interval_min']}-{updated_settings['invite_interval_max']} —Å–µ–∫—É–Ω–¥\n"
        text += f"–ú–∞–∫—Å–∏–º—É–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –∑–∞ 12—á: {updated_settings['max_invites_per_12h']}\n"
        text += f"–ú–∞–∫—Å–∏–º—É–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –∑–∞ 24—á: {updated_settings['max_invites_per_24h']}\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
        
        await message.answer(
            text,
            reply_markup=invite_settings_keyboard()
        )
        await state.clear()
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ."
        ) 